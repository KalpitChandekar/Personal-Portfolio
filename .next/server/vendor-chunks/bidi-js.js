/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bidi-js";
exports.ids = ["vendor-chunks/bidi-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/bidi-js/dist/bidi.js":
/*!*******************************************!*\
  !*** ./node_modules/bidi-js/dist/bidi.js ***!
  \*******************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  function bidiFactory() {\n  var bidi = (function (exports) {\n\n    // Bidi character types data, auto generated\n    var DATA = {\n      \"R\": \"13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73\",\n      \"EN\": \"1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9\",\n      \"ES\": \"17,2,6dp+1,f+1,av,16vr,mx+1,4o,2\",\n      \"ET\": \"z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj\",\n      \"AN\": \"16o+5,2j+9,2+1,35,ed,1ff2+9,87+u\",\n      \"CS\": \"18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b\",\n      \"B\": \"a,3,f+2,2v,690\",\n      \"S\": \"9,2,k\",\n      \"WS\": \"c,k,4f4,1vk+a,u,1j,335\",\n      \"ON\": \"x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i\",\n      \"BN\": \"0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1\",\n      \"NSM\": \"lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n\",\n      \"AL\": \"16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d\",\n      \"LRO\": \"6ct\",\n      \"RLO\": \"6cu\",\n      \"LRE\": \"6cq\",\n      \"RLE\": \"6cr\",\n      \"PDF\": \"6cs\",\n      \"LRI\": \"6ee\",\n      \"RLI\": \"6ef\",\n      \"FSI\": \"6eg\",\n      \"PDI\": \"6eh\"\n    };\n\n    var TYPES = {};\n    var TYPES_TO_NAMES = {};\n    TYPES.L = 1; //L is the default\n    TYPES_TO_NAMES[1] = 'L';\n    Object.keys(DATA).forEach(function (type, i) {\n      TYPES[type] = 1 << (i + 1);\n      TYPES_TO_NAMES[TYPES[type]] = type;\n    });\n    Object.freeze(TYPES);\n\n    var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;\n    var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;\n    var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;\n    var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;\n    var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;\n\n    var map = null;\n\n    function parseData () {\n      if (!map) {\n        //const start = performance.now()\n        map = new Map();\n        var loop = function ( type ) {\n          if (DATA.hasOwnProperty(type)) {\n            var lastCode = 0;\n            DATA[type].split(',').forEach(function (range) {\n              var ref = range.split('+');\n              var skip = ref[0];\n              var step = ref[1];\n              skip = parseInt(skip, 36);\n              step = step ? parseInt(step, 36) : 0;\n              map.set(lastCode += skip, TYPES[type]);\n              for (var i = 0; i < step; i++) {\n                map.set(++lastCode, TYPES[type]);\n              }\n            });\n          }\n        };\n\n        for (var type in DATA) loop( type );\n        //console.log(`char types parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    /**\n     * @param {string} char\n     * @return {number}\n     */\n    function getBidiCharType (char) {\n      parseData();\n      return map.get(char.codePointAt(0)) || TYPES.L\n    }\n\n    function getBidiCharTypeName(char) {\n      return TYPES_TO_NAMES[getBidiCharType(char)]\n    }\n\n    // Bidi bracket pairs data, auto generated\n    var data$1 = {\n      \"pairs\": \"14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1\",\n      \"canonical\": \"6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye\"\n    };\n\n    /**\n     * Parses an string that holds encoded codepoint mappings, e.g. for bracket pairs or\n     * mirroring characters, as encoded by scripts/generateBidiData.js. Returns an object\n     * holding the `map`, and optionally a `reverseMap` if `includeReverse:true`.\n     * @param {string} encodedString\n     * @param {boolean} includeReverse - true if you want reverseMap in the output\n     * @return {{map: Map<number, number>, reverseMap?: Map<number, number>}}\n     */\n    function parseCharacterMap (encodedString, includeReverse) {\n      var radix = 36;\n      var lastCode = 0;\n      var map = new Map();\n      var reverseMap = includeReverse && new Map();\n      var prevPair;\n      encodedString.split(',').forEach(function visit(entry) {\n        if (entry.indexOf('+') !== -1) {\n          for (var i = +entry; i--;) {\n            visit(prevPair);\n          }\n        } else {\n          prevPair = entry;\n          var ref = entry.split('>');\n          var a = ref[0];\n          var b = ref[1];\n          a = String.fromCodePoint(lastCode += parseInt(a, radix));\n          b = String.fromCodePoint(lastCode += parseInt(b, radix));\n          map.set(a, b);\n          includeReverse && reverseMap.set(b, a);\n        }\n      });\n      return { map: map, reverseMap: reverseMap }\n    }\n\n    var openToClose, closeToOpen, canonical;\n\n    function parse$1 () {\n      if (!openToClose) {\n        //const start = performance.now()\n        var ref = parseCharacterMap(data$1.pairs, true);\n        var map = ref.map;\n        var reverseMap = ref.reverseMap;\n        openToClose = map;\n        closeToOpen = reverseMap;\n        canonical = parseCharacterMap(data$1.canonical, false).map;\n        //console.log(`brackets parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    function openingToClosingBracket (char) {\n      parse$1();\n      return openToClose.get(char) || null\n    }\n\n    function closingToOpeningBracket (char) {\n      parse$1();\n      return closeToOpen.get(char) || null\n    }\n\n    function getCanonicalBracket (char) {\n      parse$1();\n      return canonical.get(char) || null\n    }\n\n    // Local type aliases\n    var TYPE_L = TYPES.L;\n    var TYPE_R = TYPES.R;\n    var TYPE_EN = TYPES.EN;\n    var TYPE_ES = TYPES.ES;\n    var TYPE_ET = TYPES.ET;\n    var TYPE_AN = TYPES.AN;\n    var TYPE_CS = TYPES.CS;\n    var TYPE_B = TYPES.B;\n    var TYPE_S = TYPES.S;\n    var TYPE_ON = TYPES.ON;\n    var TYPE_BN = TYPES.BN;\n    var TYPE_NSM = TYPES.NSM;\n    var TYPE_AL = TYPES.AL;\n    var TYPE_LRO = TYPES.LRO;\n    var TYPE_RLO = TYPES.RLO;\n    var TYPE_LRE = TYPES.LRE;\n    var TYPE_RLE = TYPES.RLE;\n    var TYPE_PDF = TYPES.PDF;\n    var TYPE_LRI = TYPES.LRI;\n    var TYPE_RLI = TYPES.RLI;\n    var TYPE_FSI = TYPES.FSI;\n    var TYPE_PDI = TYPES.PDI;\n\n    /**\n     * @typedef {object} GetEmbeddingLevelsResult\n     * @property {{start, end, level}[]} paragraphs\n     * @property {Uint8Array} levels\n     */\n\n    /**\n     * This function applies the Bidirectional Algorithm to a string, returning the resolved embedding levels\n     * in a single Uint8Array plus a list of objects holding each paragraph's start and end indices and resolved\n     * base embedding level.\n     *\n     * @param {string} string - The input string\n     * @param {\"ltr\"|\"rtl\"|\"auto\"} [baseDirection] - Use \"ltr\" or \"rtl\" to force a base paragraph direction,\n     *        otherwise a direction will be chosen automatically from each paragraph's contents.\n     * @return {GetEmbeddingLevelsResult}\n     */\n    function getEmbeddingLevels (string, baseDirection) {\n      var MAX_DEPTH = 125;\n\n      // Start by mapping all characters to their unicode type, as a bitmask integer\n      var charTypes = new Uint32Array(string.length);\n      for (var i = 0; i < string.length; i++) {\n        charTypes[i] = getBidiCharType(string[i]);\n      }\n\n      var charTypeCounts = new Map(); //will be cleared at start of each paragraph\n      function changeCharType(i, type) {\n        var oldType = charTypes[i];\n        charTypes[i] = type;\n        charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);\n        if (oldType & NEUTRAL_ISOLATE_TYPES) {\n          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);\n        }\n        charTypeCounts.set(type, (charTypeCounts.get(type) || 0) + 1);\n        if (type & NEUTRAL_ISOLATE_TYPES) {\n          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);\n        }\n      }\n\n      var embedLevels = new Uint8Array(string.length);\n      var isolationPairs = new Map(); //init->pdi and pdi->init\n\n      // === 3.3.1 The Paragraph Level ===\n      // 3.3.1 P1: Split the text into paragraphs\n      var paragraphs = []; // [{start, end, level}, ...]\n      var paragraph = null;\n      for (var i$1 = 0; i$1 < string.length; i$1++) {\n        if (!paragraph) {\n          paragraphs.push(paragraph = {\n            start: i$1,\n            end: string.length - 1,\n            // 3.3.1 P2-P3: Determine the paragraph level\n            level: baseDirection === 'rtl' ? 1 : baseDirection === 'ltr' ? 0 : determineAutoEmbedLevel(i$1, false)\n          });\n        }\n        if (charTypes[i$1] & TYPE_B) {\n          paragraph.end = i$1;\n          paragraph = null;\n        }\n      }\n\n      var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;\n      var nextEven = function (n) { return n + ((n & 1) ? 1 : 2); };\n      var nextOdd = function (n) { return n + ((n & 1) ? 2 : 1); };\n\n      // Everything from here on will operate per paragraph.\n      for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {\n        paragraph = paragraphs[paraIdx];\n        var statusStack = [{\n          _level: paragraph.level,\n          _override: 0, //0=neutral, 1=L, 2=R\n          _isolate: 0 //bool\n        }];\n        var stackTop = (void 0);\n        var overflowIsolateCount = 0;\n        var overflowEmbeddingCount = 0;\n        var validIsolateCount = 0;\n        charTypeCounts.clear();\n\n        // === 3.3.2 Explicit Levels and Directions ===\n        for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {\n          var charType = charTypes[i$2];\n          stackTop = statusStack[statusStack.length - 1];\n\n          // Set initial counts\n          charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);\n          if (charType & NEUTRAL_ISOLATE_TYPES) {\n            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);\n          }\n\n          // Explicit Embeddings: 3.3.2 X2 - X3\n          if (charType & FORMATTING_TYPES) { //prefilter all formatters\n            if (charType & (TYPE_RLE | TYPE_LRE)) {\n              embedLevels[i$2] = stackTop._level; // 5.2\n              var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);\n              if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {\n                statusStack.push({\n                  _level: level,\n                  _override: 0,\n                  _isolate: 0\n                });\n              } else if (!overflowIsolateCount) {\n                overflowEmbeddingCount++;\n              }\n            }\n\n            // Explicit Overrides: 3.3.2 X4 - X5\n            else if (charType & (TYPE_RLO | TYPE_LRO)) {\n              embedLevels[i$2] = stackTop._level; // 5.2\n              var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);\n              if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {\n                statusStack.push({\n                  _level: level$1,\n                  _override: (charType & TYPE_RLO) ? TYPE_R : TYPE_L,\n                  _isolate: 0\n                });\n              } else if (!overflowIsolateCount) {\n                overflowEmbeddingCount++;\n              }\n            }\n\n            // Isolates: 3.3.2 X5a - X5c\n            else if (charType & ISOLATE_INIT_TYPES) {\n              // X5c - FSI becomes either RLI or LRI\n              if (charType & TYPE_FSI) {\n                charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;\n              }\n\n              embedLevels[i$2] = stackTop._level;\n              if (stackTop._override) {\n                changeCharType(i$2, stackTop._override);\n              }\n              var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);\n              if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {\n                validIsolateCount++;\n                statusStack.push({\n                  _level: level$2,\n                  _override: 0,\n                  _isolate: 1,\n                  _isolInitIndex: i$2\n                });\n              } else {\n                overflowIsolateCount++;\n              }\n            }\n\n            // Terminating Isolates: 3.3.2 X6a\n            else if (charType & TYPE_PDI) {\n              if (overflowIsolateCount > 0) {\n                overflowIsolateCount--;\n              } else if (validIsolateCount > 0) {\n                overflowEmbeddingCount = 0;\n                while (!statusStack[statusStack.length - 1]._isolate) {\n                  statusStack.pop();\n                }\n                // Add to isolation pairs bidirectional mapping:\n                var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;\n                if (isolInitIndex != null) {\n                  isolationPairs.set(isolInitIndex, i$2);\n                  isolationPairs.set(i$2, isolInitIndex);\n                }\n                statusStack.pop();\n                validIsolateCount--;\n              }\n              stackTop = statusStack[statusStack.length - 1];\n              embedLevels[i$2] = stackTop._level;\n              if (stackTop._override) {\n                changeCharType(i$2, stackTop._override);\n              }\n            }\n\n\n            // Terminating Embeddings and Overrides: 3.3.2 X7\n            else if (charType & TYPE_PDF) {\n              if (overflowIsolateCount === 0) {\n                if (overflowEmbeddingCount > 0) {\n                  overflowEmbeddingCount--;\n                } else if (!stackTop._isolate && statusStack.length > 1) {\n                  statusStack.pop();\n                  stackTop = statusStack[statusStack.length - 1];\n                }\n              }\n              embedLevels[i$2] = stackTop._level; // 5.2\n            }\n\n            // End of Paragraph: 3.3.2 X8\n            else if (charType & TYPE_B) {\n              embedLevels[i$2] = paragraph.level;\n            }\n          }\n\n          // Non-formatting characters: 3.3.2 X6\n          else {\n            embedLevels[i$2] = stackTop._level;\n            // NOTE: This exclusion of BN seems to go against what section 5.2 says, but is required for test passage\n            if (stackTop._override && charType !== TYPE_BN) {\n              changeCharType(i$2, stackTop._override);\n            }\n          }\n        }\n\n        // === 3.3.3 Preparations for Implicit Processing ===\n\n        // Remove all RLE, LRE, RLO, LRO, PDF, and BN characters: 3.3.3 X9\n        // Note: Due to section 5.2, we won't remove them, but we'll use the BN_LIKE_TYPES bitset to\n        // easily ignore them all from here on out.\n\n        // 3.3.3 X10\n        // Compute the set of isolating run sequences as specified by BD13\n        var levelRuns = [];\n        var currentRun = null;\n        for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {\n          var charType$1 = charTypes[i$3];\n          if (!(charType$1 & BN_LIKE_TYPES)) {\n            var lvl = embedLevels[i$3];\n            var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;\n            var isPDI = charType$1 === TYPE_PDI;\n            if (currentRun && lvl === currentRun._level) {\n              currentRun._end = i$3;\n              currentRun._endsWithIsolInit = isIsolInit;\n            } else {\n              levelRuns.push(currentRun = {\n                _start: i$3,\n                _end: i$3,\n                _level: lvl,\n                _startsWithPDI: isPDI,\n                _endsWithIsolInit: isIsolInit\n              });\n            }\n          }\n        }\n        var isolatingRunSeqs = []; // [{seqIndices: [], sosType: L|R, eosType: L|R}]\n        for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {\n          var run = levelRuns[runIdx];\n          if (!run._startsWithPDI || (run._startsWithPDI && !isolationPairs.has(run._start))) {\n            var seqRuns = [currentRun = run];\n            for (var pdiIndex = (void 0); currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null;) {\n              for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {\n                if (levelRuns[i$4]._start === pdiIndex) {\n                  seqRuns.push(currentRun = levelRuns[i$4]);\n                  break\n                }\n              }\n            }\n            // build flat list of indices across all runs:\n            var seqIndices = [];\n            for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {\n              var run$1 = seqRuns[i$5];\n              for (var j = run$1._start; j <= run$1._end; j++) {\n                seqIndices.push(j);\n              }\n            }\n            // determine the sos/eos types:\n            var firstLevel = embedLevels[seqIndices[0]];\n            var prevLevel = paragraph.level;\n            for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {\n              if (!(charTypes[i$6] & BN_LIKE_TYPES)) { //5.2\n                prevLevel = embedLevels[i$6];\n                break\n              }\n            }\n            var lastIndex = seqIndices[seqIndices.length - 1];\n            var lastLevel = embedLevels[lastIndex];\n            var nextLevel = paragraph.level;\n            if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {\n              for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {\n                if (!(charTypes[i$7] & BN_LIKE_TYPES)) { //5.2\n                  nextLevel = embedLevels[i$7];\n                  break\n                }\n              }\n            }\n            isolatingRunSeqs.push({\n              _seqIndices: seqIndices,\n              _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,\n              _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L\n            });\n          }\n        }\n\n        // The next steps are done per isolating run sequence\n        for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {\n          var ref = isolatingRunSeqs[seqIdx];\n          var seqIndices$1 = ref._seqIndices;\n          var sosType = ref._sosType;\n          var eosType = ref._eosType;\n          /**\n           * All the level runs in an isolating run sequence have the same embedding level.\n           * \n           * DO NOT change any `embedLevels[i]` within the current scope.\n           */\n          var embedDirection = ((embedLevels[seqIndices$1[0]]) & 1) ? TYPE_R : TYPE_L;\n\n          // === 3.3.4 Resolving Weak Types ===\n\n          // W1 + 5.2. Search backward from each NSM to the first character in the isolating run sequence whose\n          // bidirectional type is not BN, and set the NSM to ON if it is an isolate initiator or PDI, and to its\n          // type otherwise. If the NSM is the first non-BN character, change the NSM to the type of sos.\n          if (charTypeCounts.get(TYPE_NSM)) {\n            for (var si = 0; si < seqIndices$1.length; si++) {\n              var i$8 = seqIndices$1[si];\n              if (charTypes[i$8] & TYPE_NSM) {\n                var prevType = sosType;\n                for (var sj = si - 1; sj >= 0; sj--) {\n                  if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) { //5.2 scan back to first non-BN\n                    prevType = charTypes[seqIndices$1[sj]];\n                    break\n                  }\n                }\n                changeCharType(i$8, (prevType & (ISOLATE_INIT_TYPES | TYPE_PDI)) ? TYPE_ON : prevType);\n              }\n            }\n          }\n\n          // W2. Search backward from each instance of a European number until the first strong type (R, L, AL, or sos)\n          // is found. If an AL is found, change the type of the European number to Arabic number.\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {\n              var i$9 = seqIndices$1[si$1];\n              if (charTypes[i$9] & TYPE_EN) {\n                for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {\n                  var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];\n                  if (prevCharType & STRONG_TYPES) {\n                    if (prevCharType === TYPE_AL) {\n                      changeCharType(i$9, TYPE_AN);\n                    }\n                    break\n                  }\n                }\n              }\n            }\n          }\n\n          // W3. Change all ALs to R\n          if (charTypeCounts.get(TYPE_AL)) {\n            for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {\n              var i$10 = seqIndices$1[si$2];\n              if (charTypes[i$10] & TYPE_AL) {\n                changeCharType(i$10, TYPE_R);\n              }\n            }\n          }\n\n          // W4. A single European separator between two European numbers changes to a European number. A single common\n          // separator between two numbers of the same type changes to that type.\n          if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {\n            for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {\n              var i$11 = seqIndices$1[si$3];\n              if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {\n                var prevType$1 = 0, nextType = 0;\n                for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {\n                  prevType$1 = charTypes[seqIndices$1[sj$2]];\n                  if (!(prevType$1 & BN_LIKE_TYPES)) { //5.2\n                    break\n                  }\n                }\n                for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {\n                  nextType = charTypes[seqIndices$1[sj$3]];\n                  if (!(nextType & BN_LIKE_TYPES)) { //5.2\n                    break\n                  }\n                }\n                if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : (prevType$1 & (TYPE_EN | TYPE_AN)))) {\n                  changeCharType(i$11, prevType$1);\n                }\n              }\n            }\n          }\n\n          // W5. A sequence of European terminators adjacent to European numbers changes to all European numbers.\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {\n              var i$12 = seqIndices$1[si$4];\n              if (charTypes[i$12] & TYPE_EN) {\n                for (var sj$4 = si$4 - 1; sj$4 >= 0 && (charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES)); sj$4--) {\n                  changeCharType(seqIndices$1[sj$4], TYPE_EN);\n                }\n                for (si$4++; si$4 < seqIndices$1.length && (charTypes[seqIndices$1[si$4]] & (TYPE_ET | BN_LIKE_TYPES | TYPE_EN)); si$4++) {\n                  if (charTypes[seqIndices$1[si$4]] !== TYPE_EN) {\n                    changeCharType(seqIndices$1[si$4], TYPE_EN);\n                  }\n                }\n              }\n            }\n          }\n\n          // W6. Otherwise, separators and terminators change to Other Neutral.\n          if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {\n            for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {\n              var i$13 = seqIndices$1[si$5];\n              if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {\n                changeCharType(i$13, TYPE_ON);\n                // 5.2 transform adjacent BNs too:\n                for (var sj$5 = si$5 - 1; sj$5 >= 0 && (charTypes[seqIndices$1[sj$5]] & BN_LIKE_TYPES); sj$5--) {\n                  changeCharType(seqIndices$1[sj$5], TYPE_ON);\n                }\n                for (var sj$6 = si$5 + 1; sj$6 < seqIndices$1.length && (charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES); sj$6++) {\n                  changeCharType(seqIndices$1[sj$6], TYPE_ON);\n                }\n              }\n            }\n          }\n\n          // W7. Search backward from each instance of a European number until the first strong type (R, L, or sos)\n          // is found. If an L is found, then change the type of the European number to L.\n          // NOTE: implemented in single forward pass for efficiency\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {\n              var i$14 = seqIndices$1[si$6];\n              var type = charTypes[i$14];\n              if (type & TYPE_EN) {\n                if (prevStrongType === TYPE_L) {\n                  changeCharType(i$14, TYPE_L);\n                }\n              } else if (type & STRONG_TYPES) {\n                prevStrongType = type;\n              }\n            }\n          }\n\n          // === 3.3.5 Resolving Neutral and Isolate Formatting Types ===\n\n          if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {\n            // N0. Process bracket pairs in an isolating run sequence sequentially in the logical order of the text\n            // positions of the opening paired brackets using the logic given below. Within this scope, bidirectional\n            // types EN and AN are treated as R.\n            var R_TYPES_FOR_N_STEPS = (TYPE_R | TYPE_EN | TYPE_AN);\n            var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L;\n\n            // * Identify the bracket pairs in the current isolating run sequence according to BD16.\n            var bracketPairs = [];\n            {\n              var openerStack = [];\n              for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {\n                // NOTE: for any potential bracket character we also test that it still carries a NI\n                // type, as that may have been changed earlier. This doesn't seem to be explicitly\n                // called out in the spec, but is required for passage of certain tests.\n                if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {\n                  var char = string[seqIndices$1[si$7]];\n                  var oppositeBracket = (void 0);\n                  // Opening bracket\n                  if (openingToClosingBracket(char) !== null) {\n                    if (openerStack.length < 63) {\n                      openerStack.push({ char: char, seqIndex: si$7 });\n                    } else {\n                      break\n                    }\n                  }\n                  // Closing bracket\n                  else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {\n                    for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {\n                      var stackChar = openerStack[stackIdx].char;\n                      if (stackChar === oppositeBracket ||\n                        stackChar === closingToOpeningBracket(getCanonicalBracket(char)) ||\n                        openingToClosingBracket(getCanonicalBracket(stackChar)) === char\n                      ) {\n                        bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);\n                        openerStack.length = stackIdx; //pop the matching bracket and all following\n                        break\n                      }\n                    }\n                  }\n                }\n              }\n              bracketPairs.sort(function (a, b) { return a[0] - b[0]; });\n            }\n            // * For each bracket-pair element in the list of pairs of text positions\n            for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {\n              var ref$1 = bracketPairs[pairIdx];\n              var openSeqIdx = ref$1[0];\n              var closeSeqIdx = ref$1[1];\n              // a. Inspect the bidirectional types of the characters enclosed within the bracket pair.\n              // b. If any strong type (either L or R) matching the embedding direction is found, set the type for both\n              // brackets in the pair to match the embedding direction.\n              var foundStrongType = false;\n              var useStrongType = 0;\n              for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {\n                var i$15 = seqIndices$1[si$8];\n                if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {\n                  foundStrongType = true;\n                  var lr = (charTypes[i$15] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                  if (lr === embedDirection) {\n                    useStrongType = lr;\n                    break\n                  }\n                }\n              }\n              // c. Otherwise, if there is a strong type it must be opposite the embedding direction. Therefore, test\n              // for an established context with a preceding strong type by checking backwards before the opening paired\n              // bracket until the first strong type (L, R, or sos) is found.\n              //    1. If the preceding strong type is also opposite the embedding direction, context is established, so\n              //    set the type for both brackets in the pair to that direction.\n              //    2. Otherwise set the type for both brackets in the pair to the embedding direction.\n              if (foundStrongType && !useStrongType) {\n                useStrongType = sosType;\n                for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {\n                  var i$16 = seqIndices$1[si$9];\n                  if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {\n                    var lr$1 = (charTypes[i$16] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                    if (lr$1 !== embedDirection) {\n                      useStrongType = lr$1;\n                    } else {\n                      useStrongType = embedDirection;\n                    }\n                    break\n                  }\n                }\n              }\n              if (useStrongType) {\n                charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType;\n                // * Any number of characters that had original bidirectional character type NSM prior to the application\n                // of W1 that immediately follow a paired bracket which changed to L or R under N0 should change to match\n                // the type of their preceding bracket.\n                if (useStrongType !== embedDirection) {\n                  for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {\n                    if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {\n                      if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {\n                        charTypes[seqIndices$1[si$10]] = useStrongType;\n                      }\n                      break\n                    }\n                  }\n                }\n                if (useStrongType !== embedDirection) {\n                  for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {\n                    if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {\n                      if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {\n                        charTypes[seqIndices$1[si$11]] = useStrongType;\n                      }\n                      break\n                    }\n                  }\n                }\n              }\n            }\n\n            // N1. A sequence of NIs takes the direction of the surrounding strong text if the text on both sides has the\n            // same direction.\n            // N2. Any remaining NIs take the embedding direction.\n            for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {\n              if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {\n                var niRunStart = si$12, niRunEnd = si$12;\n                var prevType$2 = sosType; //si === 0 ? sosType : (charTypes[seqIndices[si - 1]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L\n                for (var si2 = si$12 - 1; si2 >= 0; si2--) {\n                  if (charTypes[seqIndices$1[si2]] & BN_LIKE_TYPES) {\n                    niRunStart = si2; //5.2 treat BNs adjacent to NIs as NIs\n                  } else {\n                    prevType$2 = (charTypes[seqIndices$1[si2]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                    break\n                  }\n                }\n                var nextType$1 = eosType;\n                for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {\n                  if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {\n                    niRunEnd = si2$1;\n                  } else {\n                    nextType$1 = (charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                    break\n                  }\n                }\n                for (var sj$7 = niRunStart; sj$7 <= niRunEnd; sj$7++) {\n                  charTypes[seqIndices$1[sj$7]] = prevType$2 === nextType$1 ? prevType$2 : embedDirection;\n                }\n                si$12 = niRunEnd;\n              }\n            }\n          }\n        }\n\n        // === 3.3.6 Resolving Implicit Levels ===\n\n        for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {\n          var level$3 = embedLevels[i$17];\n          var type$1 = charTypes[i$17];\n          // I2. For all characters with an odd (right-to-left) embedding level, those of type L, EN or AN go up one level.\n          if (level$3 & 1) {\n            if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {\n              embedLevels[i$17]++;\n            }\n          }\n            // I1. For all characters with an even (left-to-right) embedding level, those of type R go up one level\n          // and those of type AN or EN go up two levels.\n          else {\n            if (type$1 & TYPE_R) {\n              embedLevels[i$17]++;\n            } else if (type$1 & (TYPE_AN | TYPE_EN)) {\n              embedLevels[i$17] += 2;\n            }\n          }\n\n          // 5.2: Resolve any LRE, RLE, LRO, RLO, PDF, or BN to the level of the preceding character if there is one,\n          // and otherwise to the base level.\n          if (type$1 & BN_LIKE_TYPES) {\n            embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];\n          }\n\n          // 3.4 L1.1-4: Reset the embedding level of segment/paragraph separators, and any sequence of whitespace or\n          // isolate formatting characters preceding them or the end of the paragraph, to the paragraph level.\n          // NOTE: this will also need to be applied to each individual line ending after line wrapping occurs.\n          if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {\n            for (var j$1 = i$17; j$1 >= 0 && (getBidiCharType(string[j$1]) & TRAILING_TYPES); j$1--) {\n              embedLevels[j$1] = paragraph.level;\n            }\n          }\n        }\n      }\n\n      // DONE! The resolved levels can then be used, after line wrapping, to flip runs of characters\n      // according to section 3.4 Reordering Resolved Levels\n      return {\n        levels: embedLevels,\n        paragraphs: paragraphs\n      }\n\n      function determineAutoEmbedLevel (start, isFSI) {\n        // 3.3.1 P2 - P3\n        for (var i = start; i < string.length; i++) {\n          var charType = charTypes[i];\n          if (charType & (TYPE_R | TYPE_AL)) {\n            return 1\n          }\n          if ((charType & (TYPE_B | TYPE_L)) || (isFSI && charType === TYPE_PDI)) {\n            return 0\n          }\n          if (charType & ISOLATE_INIT_TYPES) {\n            var pdi = indexOfMatchingPDI(i);\n            i = pdi === -1 ? string.length : pdi;\n          }\n        }\n        return 0\n      }\n\n      function indexOfMatchingPDI (isolateStart) {\n        // 3.1.2 BD9\n        var isolationLevel = 1;\n        for (var i = isolateStart + 1; i < string.length; i++) {\n          var charType = charTypes[i];\n          if (charType & TYPE_B) {\n            break\n          }\n          if (charType & TYPE_PDI) {\n            if (--isolationLevel === 0) {\n              return i\n            }\n          } else if (charType & ISOLATE_INIT_TYPES) {\n            isolationLevel++;\n          }\n        }\n        return -1\n      }\n    }\n\n    // Bidi mirrored chars data, auto generated\n    var data = \"14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1\";\n\n    var mirrorMap;\n\n    function parse () {\n      if (!mirrorMap) {\n        //const start = performance.now()\n        var ref = parseCharacterMap(data, true);\n        var map = ref.map;\n        var reverseMap = ref.reverseMap;\n        // Combine both maps into one\n        reverseMap.forEach(function (value, key) {\n          map.set(key, value);\n        });\n        mirrorMap = map;\n        //console.log(`mirrored chars parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    function getMirroredCharacter (char) {\n      parse();\n      return mirrorMap.get(char) || null\n    }\n\n    /**\n     * Given a string and its resolved embedding levels, build a map of indices to replacement chars\n     * for any characters in right-to-left segments that have defined mirrored characters.\n     * @param string\n     * @param embeddingLevels\n     * @param [start]\n     * @param [end]\n     * @return {Map<number, string>}\n     */\n    function getMirroredCharactersMap(string, embeddingLevels, start, end) {\n      var strLen = string.length;\n      start = Math.max(0, start == null ? 0 : +start);\n      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);\n\n      var map = new Map();\n      for (var i = start; i <= end; i++) {\n        if (embeddingLevels[i] & 1) { //only odd (rtl) levels\n          var mirror = getMirroredCharacter(string[i]);\n          if (mirror !== null) {\n            map.set(i, mirror);\n          }\n        }\n      }\n      return map\n    }\n\n    /**\n     * Given a start and end denoting a single line within a string, and a set of precalculated\n     * bidi embedding levels, produce a list of segments whose ordering should be flipped, in sequence.\n     * @param {string} string - the full input string\n     * @param {GetEmbeddingLevelsResult} embeddingLevelsResult - the result object from getEmbeddingLevels\n     * @param {number} [start] - first character in a subset of the full string\n     * @param {number} [end] - last character in a subset of the full string\n     * @return {number[][]} - the list of start/end segments that should be flipped, in order.\n     */\n    function getReorderSegments(string, embeddingLevelsResult, start, end) {\n      var strLen = string.length;\n      start = Math.max(0, start == null ? 0 : +start);\n      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);\n\n      var segments = [];\n      embeddingLevelsResult.paragraphs.forEach(function (paragraph) {\n        var lineStart = Math.max(start, paragraph.start);\n        var lineEnd = Math.min(end, paragraph.end);\n        if (lineStart < lineEnd) {\n          // Local slice for mutation\n          var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1);\n\n          // 3.4 L1.4: Reset any sequence of whitespace characters and/or isolate formatting characters at the\n          // end of the line to the paragraph level.\n          for (var i = lineEnd; i >= lineStart && (getBidiCharType(string[i]) & TRAILING_TYPES); i--) {\n            lineLevels[i] = paragraph.level;\n          }\n\n          // L2. From the highest level found in the text to the lowest odd level on each line, including intermediate levels\n          // not actually present in the text, reverse any contiguous sequence of characters that are at that level or higher.\n          var maxLevel = paragraph.level;\n          var minOddLevel = Infinity;\n          for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {\n            var level = lineLevels[i$1];\n            if (level > maxLevel) { maxLevel = level; }\n            if (level < minOddLevel) { minOddLevel = level | 1; }\n          }\n          for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {\n            for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {\n              if (lineLevels[i$2] >= lvl) {\n                var segStart = i$2;\n                while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {\n                  i$2++;\n                }\n                if (i$2 > segStart) {\n                  segments.push([segStart + lineStart, i$2 + lineStart]);\n                }\n              }\n            }\n          }\n        }\n      });\n      return segments\n    }\n\n    /**\n     * @param {string} string\n     * @param {GetEmbeddingLevelsResult} embedLevelsResult\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {string} the new string with bidi segments reordered\n     */\n    function getReorderedString(string, embedLevelsResult, start, end) {\n      var indices = getReorderedIndices(string, embedLevelsResult, start, end);\n      var chars = [].concat( string );\n      indices.forEach(function (charIndex, i) {\n        chars[i] = (\n          (embedLevelsResult.levels[charIndex] & 1) ? getMirroredCharacter(string[charIndex]) : null\n        ) || string[charIndex];\n      });\n      return chars.join('')\n    }\n\n    /**\n     * @param {string} string\n     * @param {GetEmbeddingLevelsResult} embedLevelsResult\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {number[]} an array with character indices in their new bidi order\n     */\n    function getReorderedIndices(string, embedLevelsResult, start, end) {\n      var segments = getReorderSegments(string, embedLevelsResult, start, end);\n      // Fill an array with indices\n      var indices = [];\n      for (var i = 0; i < string.length; i++) {\n        indices[i] = i;\n      }\n      // Reverse each segment in order\n      segments.forEach(function (ref) {\n        var start = ref[0];\n        var end = ref[1];\n\n        var slice = indices.slice(start, end + 1);\n        for (var i = slice.length; i--;) {\n          indices[end - i] = slice[i];\n        }\n      });\n      return indices\n    }\n\n    exports.closingToOpeningBracket = closingToOpeningBracket;\n    exports.getBidiCharType = getBidiCharType;\n    exports.getBidiCharTypeName = getBidiCharTypeName;\n    exports.getCanonicalBracket = getCanonicalBracket;\n    exports.getEmbeddingLevels = getEmbeddingLevels;\n    exports.getMirroredCharacter = getMirroredCharacter;\n    exports.getMirroredCharactersMap = getMirroredCharactersMap;\n    exports.getReorderSegments = getReorderSegments;\n    exports.getReorderedIndices = getReorderedIndices;\n    exports.getReorderedString = getReorderedString;\n    exports.openingToClosingBracket = openingToClosingBracket;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n    return exports;\n\n  }({}));\n  return bidi}\n\n  return bidiFactory;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmlkaS1qcy9kaXN0L2JpZGkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxFQUFFLEtBQTREO0FBQzlELEVBQUUsQ0FDc0c7QUFDeEcsQ0FBQyxzQkFBc0I7O0FBRXZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsVUFBVTtBQUN4QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEMsMEJBQTBCO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsSUFBSTtBQUNuQztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxlQUFlO0FBQ2Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1EQUFtRCxhQUFhOztBQUVoRTs7QUFFQSxHQUFHLEdBQUc7QUFDTjs7QUFFQTs7QUFFQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2JpZGktanMvZGlzdC9iaWRpLmpzPzc3OWEiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuYmlkaV9qcyA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBiaWRpRmFjdG9yeSgpIHtcbiAgdmFyIGJpZGkgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblxuICAgIC8vIEJpZGkgY2hhcmFjdGVyIHR5cGVzIGRhdGEsIGF1dG8gZ2VuZXJhdGVkXG4gICAgdmFyIERBVEEgPSB7XG4gICAgICBcIlJcIjogXCIxM2ssMWEsMiwzLDMsMisxaixjaCsxNixhKzEsNSsyLDIrbiw1LGEsNCw2KzE2LDQrMyxoKzFiLDRtbywxNzlxLDIrOSwyKzExLDJpOSs3eSwyKzY4LDQsMys0LDUrMTMsNCszLDIrNGssMysyOSw4K2NmLDF0Kzd6LHcrMTcsMyszbSwxdCszeiwxNm8xKzVyLDgrMzAsOCttYywyOSsxciwyOSs0diw3NSs3M1wiLFxuICAgICAgXCJFTlwiOiBcIjFjKzksM2QrMSw2LDE4Nys5LDUxMyw0KzUsNys5LHNmK2osMTc1aCs5LHF3K3EsMTYxZisxZCw0eHQrYSwyNWkrOVwiLFxuICAgICAgXCJFU1wiOiBcIjE3LDIsNmRwKzEsZisxLGF2LDE2dnIsbXgrMSw0bywyXCIsXG4gICAgICBcIkVUXCI6IFwieisyLDNoKzMsYisxLHltLDNlKzEsMm8scDQrMSw4LDZ1LDdjLGc2LDF3YywxbjkrNCwzMCsxYiwybiw2ZCxxaHgrMSxoMG0sYSsxLDQ5KzIsNjMrMSw0KzEsNmJiKzMsMTJqalwiLFxuICAgICAgXCJBTlwiOiBcIjE2bys1LDJqKzksMisxLDM1LGVkLDFmZjIrOSw4Nyt1XCIsXG4gICAgICBcIkNTXCI6IFwiMTgsMisxLGIsMnUsMTJrLDU1dixsLDE3djAsMiwzLDUzLDIrMSxiXCIsXG4gICAgICBcIkJcIjogXCJhLDMsZisyLDJ2LDY5MFwiLFxuICAgICAgXCJTXCI6IFwiOSwyLGtcIixcbiAgICAgIFwiV1NcIjogXCJjLGssNGY0LDF2aythLHUsMWosMzM1XCIsXG4gICAgICBcIk9OXCI6IFwieCsxLDQrNCxoKzUscis1LHIrMyx6LDUrMywyKzEsMisxLDUsMisyLDMrNCxvLHcsY2krMSw4K2QsMytkLDYrOCwyK2csMzkrMSw5LDYrMSwyLDMzLGI4LDMrMSwzYysxLDcrMSw1cixiLDdoKzMsc2ErNSwyLDNpKzYsamcrMyx1cis5LDJ2LGlqKzEsOWcrOSw3K2EsOG0sNCsxLDQ5K3gsMTR1LDIrMixjKzIsZSsyLGUrMixlKzEsaStuLGUrZSwyK3AsdSsyLGUrMiwzNisxLDIrMywyKzEsYiwyKzIsNis1LDIsMiwyLGgrMSw1KzQsNiszLDMrZiwxNisyLDUrM2wsMys4MSwxeStwLDIrNDAscSthLG0rMTMsMnIrY2gsMis5ZSw3NStoZiwzK3YsMisydyw2ZSs1LGYrNiw3NSsyYSwxYStwLDIrMmcsZCs1eCxyK2IsNiszLDQrbyxnLDYrMSw2KzIsMmsrMSw0LDJqLDVoK3osMW0rMSwxZStmLHQrMiwxZitlLGQrMyw0byszLDJzKzEsdyw1MzUrMXIsaDNsKzFpLDkzKzIsMnMsYisxLDNsK3gsMnYsNGcrMywyMSszLGt6KzEsZzV2KzEsNWEsais5LG4rdiwyLDMsMis4LDIrMSwzKzIsMiwzLDQ2KzEsNCs0LGgrNSxyKzUscithLDNoKzIsNCs2LGIrNCw3OCwxcisyNCw0K2MsNCwxaGIsZXkrNiwxMDMraiwxNmorYywxdXgrNyw1K2csZnNoLGpkcSsxdCw0LDU3KzJlLHAxLDFtLDFtLDFtLDFtLDRrdCsxLDdqKzE3LDUrMnIsZCtlLDMrZSwyK2UsMisxMCxtKzQsdywxbis1LDFxLDR6KzUsNGIrcmIsOStjLDQrYyw0KzM3LGQrMmcsOCtiLGwrYiw1KzFqLDkrOSw3KzEzLDkrdCwzKzEsMjcrM2MsMisyOSwyKzNxLGQrZCwzKzQsNCsyLDYrNixhK28sOCs2LGErMixlKzYsMTYrNDIsMisxaVwiLFxuICAgICAgXCJCTlwiOiBcIjArOCw2K2QsMnMrNSwyK3AsZSw0bTksMWt0KzIsMmIrNSw1KzUsMTdxOSt2LDdrLDZwKzgsNisxLDExOWQrMyw0NDArNyw5NnMrMSwxZWtmKzEsMWVrZisxLDFla2YrMSwxZWtmKzEsMWVrZisxLDFla2YrMSwxZWtmKzEsMWVrZisxLDFla2YrMSwxZWtmKzEsMWVrZisxLDFla2YrNzUsNnArMnJ6LDFiZW4rMSwxZWtmKzEsMWVrZisxXCIsXG4gICAgICBcIk5TTVwiOiBcImxjKzMzLDdvKzYsN2MrMTgsMiwyKzEsMisxLDIsMjErYSwxZCtrLGgsMnUrNiwzKzUsMysxLDIrMywxMCx2K3EsMmsrYSwxbis4LGEscCszLDIrOCwyKzIsMis0LDE4KzIsM2MrZSwyK3YsMWssMiw1KzcsNSw0KzYsYisxLHUsMW4sNSszLDksbCsxLHIsMysxLDFtLDUrMSw1KzEsMysyLDQsdisxLDQsYysxLDFtLDUrNCwyKzEsNSxsKzEsbis1LDIsMW4sMywyKzMsOSw4KzEsYysxLHYsMXEsZCwxZiw0LDFtKzIsNisyLDIrMyw4KzEsYysxLHUsMW4sZysxLGwrMSx0KzEsMW0rMSw1KzMsOSxsKzEsdSwyMSw4KzIsMiwyaiwzKzYsZCs3LDJyLDMrOCxjKzUsMjMrMSxzLDIsMiwxaytkLDIrNCwyKzEsNithLDIreixhLDJ2KzMsMis1LDIrMSwzKzEscSsxLDUrMixoKzMsZSwzKzEsNyxnLGprKzIscWIrMix1KzIsdSsxLHYrMSwxdCsxLDIrNiw5LDMrYSxhLDFhKzIsM2MrMSx6LDNiKzIsNSsxLGEsNysyLDY0KzEsMywxbiwyKzYsMiwyLDMrNyw3KzksMywxZCtnLDFzKzMsMWQsMis0LDIsNiwxNSs4LGQrMSx4KzMsMysxLDIrMiwxbCwyKzEsNCwyKzIsMW4rNywzKzEsNDkrMiwyK2MsMis2LDUsNyw0KzEsNWorMWwsMis0LGsxK3csMmRiKzIsM3ksMnArdixmZiszLDMwKzEsbjl4KzMsMis5LHgrMSwyOSsxLDdsLDQsNSxxKzEsNiw0OCsxLHIraCxlLDEzKzcscSthLDFiKzIsMWQsMyszLDMrMSwxNCwxdys1LDMrMSwzKzEsZCw5LDFjLDFnLDIrMiwzKzEsNisxLDIsMTcrMSw5LDZuLDMsNSxmbjUsa2krZixoK2YscjIsNmIsNDYrNCwxYWYrMiwyKzEsNiszLDE1KzIsNSw0bSsxLGZ5KzMsYXMrMSw0YSthLDR4LDFqK2UsMWwrMiwxZSszLDMrMSwxeSsyLDExKzQsMis3LDFyLGQrMSwxaCs4LGIrMywzLDJvKzIsMywyKzEsNyw0aCw0KzcsbSsxLDFtKzEsNCwxMis2LDQrNCw1Zys3LDMrMiwyLG8sMmQrNSwyLDUrMSwyKzEsNm4rMyw3KzEsMisxLHMrMSwyZSs3LDMsMisxLDJ6LDIsMys1LDIsMnUrMiwzKzMsMis0LDc4KzgsMisxLDc1KzEsMiw1LDQxKzMsMysxLDUseCs1LDMrMSwxNSs1LDMrMyw5LGErNSwzKzIsMWIrYywyKzEsYmIrNiwyKzUsMmQrbCwzKzYsMisxLDIrMSwzZis1LDQsMisxLDIrNiwyLDIxKzEsNCwyLDlvKzEsZjBjKzQsMW8rNix0NSwxcyszLDJhLGY1bCsxLDQzdCsyLGkrNywzKzYsdiszLDQ1KzIsMWowKzFpLDUrMWQsOSxmLG4rNCwyK2UsMTF0KzYsMitnLDMrNiwyKzEsMis0LDdhKzYsYzYrMywxNXQrNiwzMis2LGd6aHkrNm5cIixcbiAgICAgIFwiQUxcIjogXCIxNncsMywyLGUrMWIseisyLDIrMnMsZysxLDgrMSxiK20sMit0LHMrMmksYytlLDRoK2YsMWQrMWUsMWJ3ZStkcCwzKzN6LHgrYywyKzEsMzUrM3ksMnJtK3osNSs3LGIrNSxkdCtsLGMrdSwxN25sKzI3LDF0KzI3LDR4KzZuLDMrZFwiLFxuICAgICAgXCJMUk9cIjogXCI2Y3RcIixcbiAgICAgIFwiUkxPXCI6IFwiNmN1XCIsXG4gICAgICBcIkxSRVwiOiBcIjZjcVwiLFxuICAgICAgXCJSTEVcIjogXCI2Y3JcIixcbiAgICAgIFwiUERGXCI6IFwiNmNzXCIsXG4gICAgICBcIkxSSVwiOiBcIjZlZVwiLFxuICAgICAgXCJSTElcIjogXCI2ZWZcIixcbiAgICAgIFwiRlNJXCI6IFwiNmVnXCIsXG4gICAgICBcIlBESVwiOiBcIjZlaFwiXG4gICAgfTtcblxuICAgIHZhciBUWVBFUyA9IHt9O1xuICAgIHZhciBUWVBFU19UT19OQU1FUyA9IHt9O1xuICAgIFRZUEVTLkwgPSAxOyAvL0wgaXMgdGhlIGRlZmF1bHRcbiAgICBUWVBFU19UT19OQU1FU1sxXSA9ICdMJztcbiAgICBPYmplY3Qua2V5cyhEQVRBKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpKSB7XG4gICAgICBUWVBFU1t0eXBlXSA9IDEgPDwgKGkgKyAxKTtcbiAgICAgIFRZUEVTX1RPX05BTUVTW1RZUEVTW3R5cGVdXSA9IHR5cGU7XG4gICAgfSk7XG4gICAgT2JqZWN0LmZyZWV6ZShUWVBFUyk7XG5cbiAgICB2YXIgSVNPTEFURV9JTklUX1RZUEVTID0gVFlQRVMuTFJJIHwgVFlQRVMuUkxJIHwgVFlQRVMuRlNJO1xuICAgIHZhciBTVFJPTkdfVFlQRVMgPSBUWVBFUy5MIHwgVFlQRVMuUiB8IFRZUEVTLkFMO1xuICAgIHZhciBORVVUUkFMX0lTT0xBVEVfVFlQRVMgPSBUWVBFUy5CIHwgVFlQRVMuUyB8IFRZUEVTLldTIHwgVFlQRVMuT04gfCBUWVBFUy5GU0kgfCBUWVBFUy5MUkkgfCBUWVBFUy5STEkgfCBUWVBFUy5QREk7XG4gICAgdmFyIEJOX0xJS0VfVFlQRVMgPSBUWVBFUy5CTiB8IFRZUEVTLlJMRSB8IFRZUEVTLkxSRSB8IFRZUEVTLlJMTyB8IFRZUEVTLkxSTyB8IFRZUEVTLlBERjtcbiAgICB2YXIgVFJBSUxJTkdfVFlQRVMgPSBUWVBFUy5TIHwgVFlQRVMuV1MgfCBUWVBFUy5CIHwgSVNPTEFURV9JTklUX1RZUEVTIHwgVFlQRVMuUERJIHwgQk5fTElLRV9UWVBFUztcblxuICAgIHZhciBtYXAgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VEYXRhICgpIHtcbiAgICAgIGlmICghbWFwKSB7XG4gICAgICAgIC8vY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCB0eXBlICkge1xuICAgICAgICAgIGlmIChEQVRBLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgICAgICB2YXIgbGFzdENvZGUgPSAwO1xuICAgICAgICAgICAgREFUQVt0eXBlXS5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgICAgICAgIHZhciByZWYgPSByYW5nZS5zcGxpdCgnKycpO1xuICAgICAgICAgICAgICB2YXIgc2tpcCA9IHJlZlswXTtcbiAgICAgICAgICAgICAgdmFyIHN0ZXAgPSByZWZbMV07XG4gICAgICAgICAgICAgIHNraXAgPSBwYXJzZUludChza2lwLCAzNik7XG4gICAgICAgICAgICAgIHN0ZXAgPSBzdGVwID8gcGFyc2VJbnQoc3RlcCwgMzYpIDogMDtcbiAgICAgICAgICAgICAgbWFwLnNldChsYXN0Q29kZSArPSBza2lwLCBUWVBFU1t0eXBlXSk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFwLnNldCgrK2xhc3RDb2RlLCBUWVBFU1t0eXBlXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciB0eXBlIGluIERBVEEpIGxvb3AoIHR5cGUgKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhgY2hhciB0eXBlcyBwYXJzZWQgaW4gJHtwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0fW1zYClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhclxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRCaWRpQ2hhclR5cGUgKGNoYXIpIHtcbiAgICAgIHBhcnNlRGF0YSgpO1xuICAgICAgcmV0dXJuIG1hcC5nZXQoY2hhci5jb2RlUG9pbnRBdCgwKSkgfHwgVFlQRVMuTFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJpZGlDaGFyVHlwZU5hbWUoY2hhcikge1xuICAgICAgcmV0dXJuIFRZUEVTX1RPX05BTUVTW2dldEJpZGlDaGFyVHlwZShjaGFyKV1cbiAgICB9XG5cbiAgICAvLyBCaWRpIGJyYWNrZXQgcGFpcnMgZGF0YSwgYXV0byBnZW5lcmF0ZWRcbiAgICB2YXIgZGF0YSQxID0ge1xuICAgICAgXCJwYWlyc1wiOiBcIjE0PjEsMWU+Mix1PjIsMnd0PjEsMT4xLDFnZT4xLDF3cD4xLDFqPjEsZj4xLGhtPjEsMT4xLHU+MSx1Nj4xLDE+MSwrNSwyOD4xLHc+MSwxPjEsKzMsYjg+MSwxPjEsKzMsMT4zLC0xPi0xLDM+MSwxPjEsKzIsMXM+MSwxPjEseD4xLHRoPjEsMT4xLCsyLGRiPjEsMT4xLCszLDM+MSwxPjEsKzIsMTRxbT4xLDE+MSwrMSw0cT4xLDFlPjIsdT4yLDI+MSwrMVwiLFxuICAgICAgXCJjYW5vbmljYWxcIjogXCI2ZjE+LTZkeCw2ZHk+LTZkeCw2ZWM+LTZlZCw2ZWU+LTZlZCw2d3c+MmpqLC0yamk+MmpqLDE0cjQ+LTFlN2wsMWU3bT4tMWU3bCwxZTdtPi0xZTVjLDFlNWQ+LTFlNWIsMWU1Yz4tMTRxeCwxNHF5Pi0xNHF4LDE0dm4+LTFlY2csMWVjaD4tMWVjZywxZWR1Pi0xZWNnLDFlY2k+LTFlY2csMWVkYT4tMWVjZywxZWNpPi0xZWNnLDFlY2k+LTE2OHEsMTY4cj4tMTY4cSwxNjhzPi0xNHllLDE0eWY+LTE0eWVcIlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYW4gc3RyaW5nIHRoYXQgaG9sZHMgZW5jb2RlZCBjb2RlcG9pbnQgbWFwcGluZ3MsIGUuZy4gZm9yIGJyYWNrZXQgcGFpcnMgb3JcbiAgICAgKiBtaXJyb3JpbmcgY2hhcmFjdGVycywgYXMgZW5jb2RlZCBieSBzY3JpcHRzL2dlbmVyYXRlQmlkaURhdGEuanMuIFJldHVybnMgYW4gb2JqZWN0XG4gICAgICogaG9sZGluZyB0aGUgYG1hcGAsIGFuZCBvcHRpb25hbGx5IGEgYHJldmVyc2VNYXBgIGlmIGBpbmNsdWRlUmV2ZXJzZTp0cnVlYC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RlZFN0cmluZ1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZVJldmVyc2UgLSB0cnVlIGlmIHlvdSB3YW50IHJldmVyc2VNYXAgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge3ttYXA6IE1hcDxudW1iZXIsIG51bWJlcj4sIHJldmVyc2VNYXA/OiBNYXA8bnVtYmVyLCBudW1iZXI+fX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUNoYXJhY3Rlck1hcCAoZW5jb2RlZFN0cmluZywgaW5jbHVkZVJldmVyc2UpIHtcbiAgICAgIHZhciByYWRpeCA9IDM2O1xuICAgICAgdmFyIGxhc3RDb2RlID0gMDtcbiAgICAgIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICB2YXIgcmV2ZXJzZU1hcCA9IGluY2x1ZGVSZXZlcnNlICYmIG5ldyBNYXAoKTtcbiAgICAgIHZhciBwcmV2UGFpcjtcbiAgICAgIGVuY29kZWRTdHJpbmcuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uIHZpc2l0KGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeS5pbmRleE9mKCcrJykgIT09IC0xKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9ICtlbnRyeTsgaS0tOykge1xuICAgICAgICAgICAgdmlzaXQocHJldlBhaXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2UGFpciA9IGVudHJ5O1xuICAgICAgICAgIHZhciByZWYgPSBlbnRyeS5zcGxpdCgnPicpO1xuICAgICAgICAgIHZhciBhID0gcmVmWzBdO1xuICAgICAgICAgIHZhciBiID0gcmVmWzFdO1xuICAgICAgICAgIGEgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChsYXN0Q29kZSArPSBwYXJzZUludChhLCByYWRpeCkpO1xuICAgICAgICAgIGIgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChsYXN0Q29kZSArPSBwYXJzZUludChiLCByYWRpeCkpO1xuICAgICAgICAgIG1hcC5zZXQoYSwgYik7XG4gICAgICAgICAgaW5jbHVkZVJldmVyc2UgJiYgcmV2ZXJzZU1hcC5zZXQoYiwgYSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHsgbWFwOiBtYXAsIHJldmVyc2VNYXA6IHJldmVyc2VNYXAgfVxuICAgIH1cblxuICAgIHZhciBvcGVuVG9DbG9zZSwgY2xvc2VUb09wZW4sIGNhbm9uaWNhbDtcblxuICAgIGZ1bmN0aW9uIHBhcnNlJDEgKCkge1xuICAgICAgaWYgKCFvcGVuVG9DbG9zZSkge1xuICAgICAgICAvL2NvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgdmFyIHJlZiA9IHBhcnNlQ2hhcmFjdGVyTWFwKGRhdGEkMS5wYWlycywgdHJ1ZSk7XG4gICAgICAgIHZhciBtYXAgPSByZWYubWFwO1xuICAgICAgICB2YXIgcmV2ZXJzZU1hcCA9IHJlZi5yZXZlcnNlTWFwO1xuICAgICAgICBvcGVuVG9DbG9zZSA9IG1hcDtcbiAgICAgICAgY2xvc2VUb09wZW4gPSByZXZlcnNlTWFwO1xuICAgICAgICBjYW5vbmljYWwgPSBwYXJzZUNoYXJhY3Rlck1hcChkYXRhJDEuY2Fub25pY2FsLCBmYWxzZSkubWFwO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGBicmFja2V0cyBwYXJzZWQgaW4gJHtwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0fW1zYClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvcGVuaW5nVG9DbG9zaW5nQnJhY2tldCAoY2hhcikge1xuICAgICAgcGFyc2UkMSgpO1xuICAgICAgcmV0dXJuIG9wZW5Ub0Nsb3NlLmdldChjaGFyKSB8fCBudWxsXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2luZ1RvT3BlbmluZ0JyYWNrZXQgKGNoYXIpIHtcbiAgICAgIHBhcnNlJDEoKTtcbiAgICAgIHJldHVybiBjbG9zZVRvT3Blbi5nZXQoY2hhcikgfHwgbnVsbFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENhbm9uaWNhbEJyYWNrZXQgKGNoYXIpIHtcbiAgICAgIHBhcnNlJDEoKTtcbiAgICAgIHJldHVybiBjYW5vbmljYWwuZ2V0KGNoYXIpIHx8IG51bGxcbiAgICB9XG5cbiAgICAvLyBMb2NhbCB0eXBlIGFsaWFzZXNcbiAgICB2YXIgVFlQRV9MID0gVFlQRVMuTDtcbiAgICB2YXIgVFlQRV9SID0gVFlQRVMuUjtcbiAgICB2YXIgVFlQRV9FTiA9IFRZUEVTLkVOO1xuICAgIHZhciBUWVBFX0VTID0gVFlQRVMuRVM7XG4gICAgdmFyIFRZUEVfRVQgPSBUWVBFUy5FVDtcbiAgICB2YXIgVFlQRV9BTiA9IFRZUEVTLkFOO1xuICAgIHZhciBUWVBFX0NTID0gVFlQRVMuQ1M7XG4gICAgdmFyIFRZUEVfQiA9IFRZUEVTLkI7XG4gICAgdmFyIFRZUEVfUyA9IFRZUEVTLlM7XG4gICAgdmFyIFRZUEVfT04gPSBUWVBFUy5PTjtcbiAgICB2YXIgVFlQRV9CTiA9IFRZUEVTLkJOO1xuICAgIHZhciBUWVBFX05TTSA9IFRZUEVTLk5TTTtcbiAgICB2YXIgVFlQRV9BTCA9IFRZUEVTLkFMO1xuICAgIHZhciBUWVBFX0xSTyA9IFRZUEVTLkxSTztcbiAgICB2YXIgVFlQRV9STE8gPSBUWVBFUy5STE87XG4gICAgdmFyIFRZUEVfTFJFID0gVFlQRVMuTFJFO1xuICAgIHZhciBUWVBFX1JMRSA9IFRZUEVTLlJMRTtcbiAgICB2YXIgVFlQRV9QREYgPSBUWVBFUy5QREY7XG4gICAgdmFyIFRZUEVfTFJJID0gVFlQRVMuTFJJO1xuICAgIHZhciBUWVBFX1JMSSA9IFRZUEVTLlJMSTtcbiAgICB2YXIgVFlQRV9GU0kgPSBUWVBFUy5GU0k7XG4gICAgdmFyIFRZUEVfUERJID0gVFlQRVMuUERJO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge29iamVjdH0gR2V0RW1iZWRkaW5nTGV2ZWxzUmVzdWx0XG4gICAgICogQHByb3BlcnR5IHt7c3RhcnQsIGVuZCwgbGV2ZWx9W119IHBhcmFncmFwaHNcbiAgICAgKiBAcHJvcGVydHkge1VpbnQ4QXJyYXl9IGxldmVsc1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBhcHBsaWVzIHRoZSBCaWRpcmVjdGlvbmFsIEFsZ29yaXRobSB0byBhIHN0cmluZywgcmV0dXJuaW5nIHRoZSByZXNvbHZlZCBlbWJlZGRpbmcgbGV2ZWxzXG4gICAgICogaW4gYSBzaW5nbGUgVWludDhBcnJheSBwbHVzIGEgbGlzdCBvZiBvYmplY3RzIGhvbGRpbmcgZWFjaCBwYXJhZ3JhcGgncyBzdGFydCBhbmQgZW5kIGluZGljZXMgYW5kIHJlc29sdmVkXG4gICAgICogYmFzZSBlbWJlZGRpbmcgbGV2ZWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gVGhlIGlucHV0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7XCJsdHJcInxcInJ0bFwifFwiYXV0b1wifSBbYmFzZURpcmVjdGlvbl0gLSBVc2UgXCJsdHJcIiBvciBcInJ0bFwiIHRvIGZvcmNlIGEgYmFzZSBwYXJhZ3JhcGggZGlyZWN0aW9uLFxuICAgICAqICAgICAgICBvdGhlcndpc2UgYSBkaXJlY3Rpb24gd2lsbCBiZSBjaG9zZW4gYXV0b21hdGljYWxseSBmcm9tIGVhY2ggcGFyYWdyYXBoJ3MgY29udGVudHMuXG4gICAgICogQHJldHVybiB7R2V0RW1iZWRkaW5nTGV2ZWxzUmVzdWx0fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEVtYmVkZGluZ0xldmVscyAoc3RyaW5nLCBiYXNlRGlyZWN0aW9uKSB7XG4gICAgICB2YXIgTUFYX0RFUFRIID0gMTI1O1xuXG4gICAgICAvLyBTdGFydCBieSBtYXBwaW5nIGFsbCBjaGFyYWN0ZXJzIHRvIHRoZWlyIHVuaWNvZGUgdHlwZSwgYXMgYSBiaXRtYXNrIGludGVnZXJcbiAgICAgIHZhciBjaGFyVHlwZXMgPSBuZXcgVWludDMyQXJyYXkoc3RyaW5nLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGFyVHlwZXNbaV0gPSBnZXRCaWRpQ2hhclR5cGUoc3RyaW5nW2ldKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYXJUeXBlQ291bnRzID0gbmV3IE1hcCgpOyAvL3dpbGwgYmUgY2xlYXJlZCBhdCBzdGFydCBvZiBlYWNoIHBhcmFncmFwaFxuICAgICAgZnVuY3Rpb24gY2hhbmdlQ2hhclR5cGUoaSwgdHlwZSkge1xuICAgICAgICB2YXIgb2xkVHlwZSA9IGNoYXJUeXBlc1tpXTtcbiAgICAgICAgY2hhclR5cGVzW2ldID0gdHlwZTtcbiAgICAgICAgY2hhclR5cGVDb3VudHMuc2V0KG9sZFR5cGUsIGNoYXJUeXBlQ291bnRzLmdldChvbGRUeXBlKSAtIDEpO1xuICAgICAgICBpZiAob2xkVHlwZSAmIE5FVVRSQUxfSVNPTEFURV9UWVBFUykge1xuICAgICAgICAgIGNoYXJUeXBlQ291bnRzLnNldChORVVUUkFMX0lTT0xBVEVfVFlQRVMsIGNoYXJUeXBlQ291bnRzLmdldChORVVUUkFMX0lTT0xBVEVfVFlQRVMpIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hhclR5cGVDb3VudHMuc2V0KHR5cGUsIChjaGFyVHlwZUNvdW50cy5nZXQodHlwZSkgfHwgMCkgKyAxKTtcbiAgICAgICAgaWYgKHR5cGUgJiBORVVUUkFMX0lTT0xBVEVfVFlQRVMpIHtcbiAgICAgICAgICBjaGFyVHlwZUNvdW50cy5zZXQoTkVVVFJBTF9JU09MQVRFX1RZUEVTLCAoY2hhclR5cGVDb3VudHMuZ2V0KE5FVVRSQUxfSVNPTEFURV9UWVBFUykgfHwgMCkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZW1iZWRMZXZlbHMgPSBuZXcgVWludDhBcnJheShzdHJpbmcubGVuZ3RoKTtcbiAgICAgIHZhciBpc29sYXRpb25QYWlycyA9IG5ldyBNYXAoKTsgLy9pbml0LT5wZGkgYW5kIHBkaS0+aW5pdFxuXG4gICAgICAvLyA9PT0gMy4zLjEgVGhlIFBhcmFncmFwaCBMZXZlbCA9PT1cbiAgICAgIC8vIDMuMy4xIFAxOiBTcGxpdCB0aGUgdGV4dCBpbnRvIHBhcmFncmFwaHNcbiAgICAgIHZhciBwYXJhZ3JhcGhzID0gW107IC8vIFt7c3RhcnQsIGVuZCwgbGV2ZWx9LCAuLi5dXG4gICAgICB2YXIgcGFyYWdyYXBoID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHN0cmluZy5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIGlmICghcGFyYWdyYXBoKSB7XG4gICAgICAgICAgcGFyYWdyYXBocy5wdXNoKHBhcmFncmFwaCA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBpJDEsXG4gICAgICAgICAgICBlbmQ6IHN0cmluZy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgLy8gMy4zLjEgUDItUDM6IERldGVybWluZSB0aGUgcGFyYWdyYXBoIGxldmVsXG4gICAgICAgICAgICBsZXZlbDogYmFzZURpcmVjdGlvbiA9PT0gJ3J0bCcgPyAxIDogYmFzZURpcmVjdGlvbiA9PT0gJ2x0cicgPyAwIDogZGV0ZXJtaW5lQXV0b0VtYmVkTGV2ZWwoaSQxLCBmYWxzZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhclR5cGVzW2kkMV0gJiBUWVBFX0IpIHtcbiAgICAgICAgICBwYXJhZ3JhcGguZW5kID0gaSQxO1xuICAgICAgICAgIHBhcmFncmFwaCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIEZPUk1BVFRJTkdfVFlQRVMgPSBUWVBFX1JMRSB8IFRZUEVfTFJFIHwgVFlQRV9STE8gfCBUWVBFX0xSTyB8IElTT0xBVEVfSU5JVF9UWVBFUyB8IFRZUEVfUERJIHwgVFlQRV9QREYgfCBUWVBFX0I7XG4gICAgICB2YXIgbmV4dEV2ZW4gPSBmdW5jdGlvbiAobikgeyByZXR1cm4gbiArICgobiAmIDEpID8gMSA6IDIpOyB9O1xuICAgICAgdmFyIG5leHRPZGQgPSBmdW5jdGlvbiAobikgeyByZXR1cm4gbiArICgobiAmIDEpID8gMiA6IDEpOyB9O1xuXG4gICAgICAvLyBFdmVyeXRoaW5nIGZyb20gaGVyZSBvbiB3aWxsIG9wZXJhdGUgcGVyIHBhcmFncmFwaC5cbiAgICAgIGZvciAodmFyIHBhcmFJZHggPSAwOyBwYXJhSWR4IDwgcGFyYWdyYXBocy5sZW5ndGg7IHBhcmFJZHgrKykge1xuICAgICAgICBwYXJhZ3JhcGggPSBwYXJhZ3JhcGhzW3BhcmFJZHhdO1xuICAgICAgICB2YXIgc3RhdHVzU3RhY2sgPSBbe1xuICAgICAgICAgIF9sZXZlbDogcGFyYWdyYXBoLmxldmVsLFxuICAgICAgICAgIF9vdmVycmlkZTogMCwgLy8wPW5ldXRyYWwsIDE9TCwgMj1SXG4gICAgICAgICAgX2lzb2xhdGU6IDAgLy9ib29sXG4gICAgICAgIH1dO1xuICAgICAgICB2YXIgc3RhY2tUb3AgPSAodm9pZCAwKTtcbiAgICAgICAgdmFyIG92ZXJmbG93SXNvbGF0ZUNvdW50ID0gMDtcbiAgICAgICAgdmFyIG92ZXJmbG93RW1iZWRkaW5nQ291bnQgPSAwO1xuICAgICAgICB2YXIgdmFsaWRJc29sYXRlQ291bnQgPSAwO1xuICAgICAgICBjaGFyVHlwZUNvdW50cy5jbGVhcigpO1xuXG4gICAgICAgIC8vID09PSAzLjMuMiBFeHBsaWNpdCBMZXZlbHMgYW5kIERpcmVjdGlvbnMgPT09XG4gICAgICAgIGZvciAodmFyIGkkMiA9IHBhcmFncmFwaC5zdGFydDsgaSQyIDw9IHBhcmFncmFwaC5lbmQ7IGkkMisrKSB7XG4gICAgICAgICAgdmFyIGNoYXJUeXBlID0gY2hhclR5cGVzW2kkMl07XG4gICAgICAgICAgc3RhY2tUb3AgPSBzdGF0dXNTdGFja1tzdGF0dXNTdGFjay5sZW5ndGggLSAxXTtcblxuICAgICAgICAgIC8vIFNldCBpbml0aWFsIGNvdW50c1xuICAgICAgICAgIGNoYXJUeXBlQ291bnRzLnNldChjaGFyVHlwZSwgKGNoYXJUeXBlQ291bnRzLmdldChjaGFyVHlwZSkgfHwgMCkgKyAxKTtcbiAgICAgICAgICBpZiAoY2hhclR5cGUgJiBORVVUUkFMX0lTT0xBVEVfVFlQRVMpIHtcbiAgICAgICAgICAgIGNoYXJUeXBlQ291bnRzLnNldChORVVUUkFMX0lTT0xBVEVfVFlQRVMsIChjaGFyVHlwZUNvdW50cy5nZXQoTkVVVFJBTF9JU09MQVRFX1RZUEVTKSB8fCAwKSArIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEV4cGxpY2l0IEVtYmVkZGluZ3M6IDMuMy4yIFgyIC0gWDNcbiAgICAgICAgICBpZiAoY2hhclR5cGUgJiBGT1JNQVRUSU5HX1RZUEVTKSB7IC8vcHJlZmlsdGVyIGFsbCBmb3JtYXR0ZXJzXG4gICAgICAgICAgICBpZiAoY2hhclR5cGUgJiAoVFlQRV9STEUgfCBUWVBFX0xSRSkpIHtcbiAgICAgICAgICAgICAgZW1iZWRMZXZlbHNbaSQyXSA9IHN0YWNrVG9wLl9sZXZlbDsgLy8gNS4yXG4gICAgICAgICAgICAgIHZhciBsZXZlbCA9IChjaGFyVHlwZSA9PT0gVFlQRV9STEUgPyBuZXh0T2RkIDogbmV4dEV2ZW4pKHN0YWNrVG9wLl9sZXZlbCk7XG4gICAgICAgICAgICAgIGlmIChsZXZlbCA8PSBNQVhfREVQVEggJiYgIW92ZXJmbG93SXNvbGF0ZUNvdW50ICYmICFvdmVyZmxvd0VtYmVkZGluZ0NvdW50KSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzU3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICBfbGV2ZWw6IGxldmVsLFxuICAgICAgICAgICAgICAgICAgX292ZXJyaWRlOiAwLFxuICAgICAgICAgICAgICAgICAgX2lzb2xhdGU6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghb3ZlcmZsb3dJc29sYXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd0VtYmVkZGluZ0NvdW50Kys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhwbGljaXQgT3ZlcnJpZGVzOiAzLjMuMiBYNCAtIFg1XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyVHlwZSAmIChUWVBFX1JMTyB8IFRZUEVfTFJPKSkge1xuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDJdID0gc3RhY2tUb3AuX2xldmVsOyAvLyA1LjJcbiAgICAgICAgICAgICAgdmFyIGxldmVsJDEgPSAoY2hhclR5cGUgPT09IFRZUEVfUkxPID8gbmV4dE9kZCA6IG5leHRFdmVuKShzdGFja1RvcC5fbGV2ZWwpO1xuICAgICAgICAgICAgICBpZiAobGV2ZWwkMSA8PSBNQVhfREVQVEggJiYgIW92ZXJmbG93SXNvbGF0ZUNvdW50ICYmICFvdmVyZmxvd0VtYmVkZGluZ0NvdW50KSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzU3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICBfbGV2ZWw6IGxldmVsJDEsXG4gICAgICAgICAgICAgICAgICBfb3ZlcnJpZGU6IChjaGFyVHlwZSAmIFRZUEVfUkxPKSA/IFRZUEVfUiA6IFRZUEVfTCxcbiAgICAgICAgICAgICAgICAgIF9pc29sYXRlOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW92ZXJmbG93SXNvbGF0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dFbWJlZGRpbmdDb3VudCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElzb2xhdGVzOiAzLjMuMiBYNWEgLSBYNWNcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJUeXBlICYgSVNPTEFURV9JTklUX1RZUEVTKSB7XG4gICAgICAgICAgICAgIC8vIFg1YyAtIEZTSSBiZWNvbWVzIGVpdGhlciBSTEkgb3IgTFJJXG4gICAgICAgICAgICAgIGlmIChjaGFyVHlwZSAmIFRZUEVfRlNJKSB7XG4gICAgICAgICAgICAgICAgY2hhclR5cGUgPSBkZXRlcm1pbmVBdXRvRW1iZWRMZXZlbChpJDIgKyAxLCB0cnVlKSA9PT0gMSA/IFRZUEVfUkxJIDogVFlQRV9MUkk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDJdID0gc3RhY2tUb3AuX2xldmVsO1xuICAgICAgICAgICAgICBpZiAoc3RhY2tUb3AuX292ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQyLCBzdGFja1RvcC5fb3ZlcnJpZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBsZXZlbCQyID0gKGNoYXJUeXBlID09PSBUWVBFX1JMSSA/IG5leHRPZGQgOiBuZXh0RXZlbikoc3RhY2tUb3AuX2xldmVsKTtcbiAgICAgICAgICAgICAgaWYgKGxldmVsJDIgPD0gTUFYX0RFUFRIICYmIG92ZXJmbG93SXNvbGF0ZUNvdW50ID09PSAwICYmIG92ZXJmbG93RW1iZWRkaW5nQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YWxpZElzb2xhdGVDb3VudCsrO1xuICAgICAgICAgICAgICAgIHN0YXR1c1N0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgX2xldmVsOiBsZXZlbCQyLFxuICAgICAgICAgICAgICAgICAgX292ZXJyaWRlOiAwLFxuICAgICAgICAgICAgICAgICAgX2lzb2xhdGU6IDEsXG4gICAgICAgICAgICAgICAgICBfaXNvbEluaXRJbmRleDogaSQyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dJc29sYXRlQ291bnQrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUZXJtaW5hdGluZyBJc29sYXRlczogMy4zLjIgWDZhXG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyVHlwZSAmIFRZUEVfUERJKSB7XG4gICAgICAgICAgICAgIGlmIChvdmVyZmxvd0lzb2xhdGVDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd0lzb2xhdGVDb3VudC0tO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbGlkSXNvbGF0ZUNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93RW1iZWRkaW5nQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlICghc3RhdHVzU3RhY2tbc3RhdHVzU3RhY2subGVuZ3RoIC0gMV0uX2lzb2xhdGUpIHtcbiAgICAgICAgICAgICAgICAgIHN0YXR1c1N0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgdG8gaXNvbGF0aW9uIHBhaXJzIGJpZGlyZWN0aW9uYWwgbWFwcGluZzpcbiAgICAgICAgICAgICAgICB2YXIgaXNvbEluaXRJbmRleCA9IHN0YXR1c1N0YWNrW3N0YXR1c1N0YWNrLmxlbmd0aCAtIDFdLl9pc29sSW5pdEluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChpc29sSW5pdEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBhaXJzLnNldChpc29sSW5pdEluZGV4LCBpJDIpO1xuICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUGFpcnMuc2V0KGkkMiwgaXNvbEluaXRJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXR1c1N0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIHZhbGlkSXNvbGF0ZUNvdW50LS07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RhY2tUb3AgPSBzdGF0dXNTdGFja1tzdGF0dXNTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgZW1iZWRMZXZlbHNbaSQyXSA9IHN0YWNrVG9wLl9sZXZlbDtcbiAgICAgICAgICAgICAgaWYgKHN0YWNrVG9wLl9vdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKGkkMiwgc3RhY2tUb3AuX292ZXJyaWRlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIFRlcm1pbmF0aW5nIEVtYmVkZGluZ3MgYW5kIE92ZXJyaWRlczogMy4zLjIgWDdcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJUeXBlICYgVFlQRV9QREYpIHtcbiAgICAgICAgICAgICAgaWYgKG92ZXJmbG93SXNvbGF0ZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG92ZXJmbG93RW1iZWRkaW5nQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBvdmVyZmxvd0VtYmVkZGluZ0NvdW50LS07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RhY2tUb3AuX2lzb2xhdGUgJiYgc3RhdHVzU3RhY2subGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgc3RhdHVzU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICBzdGFja1RvcCA9IHN0YXR1c1N0YWNrW3N0YXR1c1N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDJdID0gc3RhY2tUb3AuX2xldmVsOyAvLyA1LjJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5kIG9mIFBhcmFncmFwaDogMy4zLjIgWDhcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJUeXBlICYgVFlQRV9CKSB7XG4gICAgICAgICAgICAgIGVtYmVkTGV2ZWxzW2kkMl0gPSBwYXJhZ3JhcGgubGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTm9uLWZvcm1hdHRpbmcgY2hhcmFjdGVyczogMy4zLjIgWDZcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVtYmVkTGV2ZWxzW2kkMl0gPSBzdGFja1RvcC5fbGV2ZWw7XG4gICAgICAgICAgICAvLyBOT1RFOiBUaGlzIGV4Y2x1c2lvbiBvZiBCTiBzZWVtcyB0byBnbyBhZ2FpbnN0IHdoYXQgc2VjdGlvbiA1LjIgc2F5cywgYnV0IGlzIHJlcXVpcmVkIGZvciB0ZXN0IHBhc3NhZ2VcbiAgICAgICAgICAgIGlmIChzdGFja1RvcC5fb3ZlcnJpZGUgJiYgY2hhclR5cGUgIT09IFRZUEVfQk4pIHtcbiAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQyLCBzdGFja1RvcC5fb3ZlcnJpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vID09PSAzLjMuMyBQcmVwYXJhdGlvbnMgZm9yIEltcGxpY2l0IFByb2Nlc3NpbmcgPT09XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBSTEUsIExSRSwgUkxPLCBMUk8sIFBERiwgYW5kIEJOIGNoYXJhY3RlcnM6IDMuMy4zIFg5XG4gICAgICAgIC8vIE5vdGU6IER1ZSB0byBzZWN0aW9uIDUuMiwgd2Ugd29uJ3QgcmVtb3ZlIHRoZW0sIGJ1dCB3ZSdsbCB1c2UgdGhlIEJOX0xJS0VfVFlQRVMgYml0c2V0IHRvXG4gICAgICAgIC8vIGVhc2lseSBpZ25vcmUgdGhlbSBhbGwgZnJvbSBoZXJlIG9uIG91dC5cblxuICAgICAgICAvLyAzLjMuMyBYMTBcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgc2V0IG9mIGlzb2xhdGluZyBydW4gc2VxdWVuY2VzIGFzIHNwZWNpZmllZCBieSBCRDEzXG4gICAgICAgIHZhciBsZXZlbFJ1bnMgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnRSdW4gPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBpJDMgPSBwYXJhZ3JhcGguc3RhcnQ7IGkkMyA8PSBwYXJhZ3JhcGguZW5kOyBpJDMrKykge1xuICAgICAgICAgIHZhciBjaGFyVHlwZSQxID0gY2hhclR5cGVzW2kkM107XG4gICAgICAgICAgaWYgKCEoY2hhclR5cGUkMSAmIEJOX0xJS0VfVFlQRVMpKSB7XG4gICAgICAgICAgICB2YXIgbHZsID0gZW1iZWRMZXZlbHNbaSQzXTtcbiAgICAgICAgICAgIHZhciBpc0lzb2xJbml0ID0gY2hhclR5cGUkMSAmIElTT0xBVEVfSU5JVF9UWVBFUztcbiAgICAgICAgICAgIHZhciBpc1BESSA9IGNoYXJUeXBlJDEgPT09IFRZUEVfUERJO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRSdW4gJiYgbHZsID09PSBjdXJyZW50UnVuLl9sZXZlbCkge1xuICAgICAgICAgICAgICBjdXJyZW50UnVuLl9lbmQgPSBpJDM7XG4gICAgICAgICAgICAgIGN1cnJlbnRSdW4uX2VuZHNXaXRoSXNvbEluaXQgPSBpc0lzb2xJbml0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV2ZWxSdW5zLnB1c2goY3VycmVudFJ1biA9IHtcbiAgICAgICAgICAgICAgICBfc3RhcnQ6IGkkMyxcbiAgICAgICAgICAgICAgICBfZW5kOiBpJDMsXG4gICAgICAgICAgICAgICAgX2xldmVsOiBsdmwsXG4gICAgICAgICAgICAgICAgX3N0YXJ0c1dpdGhQREk6IGlzUERJLFxuICAgICAgICAgICAgICAgIF9lbmRzV2l0aElzb2xJbml0OiBpc0lzb2xJbml0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNvbGF0aW5nUnVuU2VxcyA9IFtdOyAvLyBbe3NlcUluZGljZXM6IFtdLCBzb3NUeXBlOiBMfFIsIGVvc1R5cGU6IEx8Un1dXG4gICAgICAgIGZvciAodmFyIHJ1bklkeCA9IDA7IHJ1bklkeCA8IGxldmVsUnVucy5sZW5ndGg7IHJ1bklkeCsrKSB7XG4gICAgICAgICAgdmFyIHJ1biA9IGxldmVsUnVuc1tydW5JZHhdO1xuICAgICAgICAgIGlmICghcnVuLl9zdGFydHNXaXRoUERJIHx8IChydW4uX3N0YXJ0c1dpdGhQREkgJiYgIWlzb2xhdGlvblBhaXJzLmhhcyhydW4uX3N0YXJ0KSkpIHtcbiAgICAgICAgICAgIHZhciBzZXFSdW5zID0gW2N1cnJlbnRSdW4gPSBydW5dO1xuICAgICAgICAgICAgZm9yICh2YXIgcGRpSW5kZXggPSAodm9pZCAwKTsgY3VycmVudFJ1biAmJiBjdXJyZW50UnVuLl9lbmRzV2l0aElzb2xJbml0ICYmIChwZGlJbmRleCA9IGlzb2xhdGlvblBhaXJzLmdldChjdXJyZW50UnVuLl9lbmQpKSAhPSBudWxsOykge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDQgPSBydW5JZHggKyAxOyBpJDQgPCBsZXZlbFJ1bnMubGVuZ3RoOyBpJDQrKykge1xuICAgICAgICAgICAgICAgIGlmIChsZXZlbFJ1bnNbaSQ0XS5fc3RhcnQgPT09IHBkaUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICBzZXFSdW5zLnB1c2goY3VycmVudFJ1biA9IGxldmVsUnVuc1tpJDRdKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBidWlsZCBmbGF0IGxpc3Qgb2YgaW5kaWNlcyBhY3Jvc3MgYWxsIHJ1bnM6XG4gICAgICAgICAgICB2YXIgc2VxSW5kaWNlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQ1ID0gMDsgaSQ1IDwgc2VxUnVucy5sZW5ndGg7IGkkNSsrKSB7XG4gICAgICAgICAgICAgIHZhciBydW4kMSA9IHNlcVJ1bnNbaSQ1XTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IHJ1biQxLl9zdGFydDsgaiA8PSBydW4kMS5fZW5kOyBqKyspIHtcbiAgICAgICAgICAgICAgICBzZXFJbmRpY2VzLnB1c2goaik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRldGVybWluZSB0aGUgc29zL2VvcyB0eXBlczpcbiAgICAgICAgICAgIHZhciBmaXJzdExldmVsID0gZW1iZWRMZXZlbHNbc2VxSW5kaWNlc1swXV07XG4gICAgICAgICAgICB2YXIgcHJldkxldmVsID0gcGFyYWdyYXBoLmxldmVsO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQ2ID0gc2VxSW5kaWNlc1swXSAtIDE7IGkkNiA+PSAwOyBpJDYtLSkge1xuICAgICAgICAgICAgICBpZiAoIShjaGFyVHlwZXNbaSQ2XSAmIEJOX0xJS0VfVFlQRVMpKSB7IC8vNS4yXG4gICAgICAgICAgICAgICAgcHJldkxldmVsID0gZW1iZWRMZXZlbHNbaSQ2XTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gc2VxSW5kaWNlc1tzZXFJbmRpY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgdmFyIGxhc3RMZXZlbCA9IGVtYmVkTGV2ZWxzW2xhc3RJbmRleF07XG4gICAgICAgICAgICB2YXIgbmV4dExldmVsID0gcGFyYWdyYXBoLmxldmVsO1xuICAgICAgICAgICAgaWYgKCEoY2hhclR5cGVzW2xhc3RJbmRleF0gJiBJU09MQVRFX0lOSVRfVFlQRVMpKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkNyA9IGxhc3RJbmRleCArIDE7IGkkNyA8PSBwYXJhZ3JhcGguZW5kOyBpJDcrKykge1xuICAgICAgICAgICAgICAgIGlmICghKGNoYXJUeXBlc1tpJDddICYgQk5fTElLRV9UWVBFUykpIHsgLy81LjJcbiAgICAgICAgICAgICAgICAgIG5leHRMZXZlbCA9IGVtYmVkTGV2ZWxzW2kkN107XG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNvbGF0aW5nUnVuU2Vxcy5wdXNoKHtcbiAgICAgICAgICAgICAgX3NlcUluZGljZXM6IHNlcUluZGljZXMsXG4gICAgICAgICAgICAgIF9zb3NUeXBlOiBNYXRoLm1heChwcmV2TGV2ZWwsIGZpcnN0TGV2ZWwpICUgMiA/IFRZUEVfUiA6IFRZUEVfTCxcbiAgICAgICAgICAgICAgX2Vvc1R5cGU6IE1hdGgubWF4KG5leHRMZXZlbCwgbGFzdExldmVsKSAlIDIgPyBUWVBFX1IgOiBUWVBFX0xcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBuZXh0IHN0ZXBzIGFyZSBkb25lIHBlciBpc29sYXRpbmcgcnVuIHNlcXVlbmNlXG4gICAgICAgIGZvciAodmFyIHNlcUlkeCA9IDA7IHNlcUlkeCA8IGlzb2xhdGluZ1J1blNlcXMubGVuZ3RoOyBzZXFJZHgrKykge1xuICAgICAgICAgIHZhciByZWYgPSBpc29sYXRpbmdSdW5TZXFzW3NlcUlkeF07XG4gICAgICAgICAgdmFyIHNlcUluZGljZXMkMSA9IHJlZi5fc2VxSW5kaWNlcztcbiAgICAgICAgICB2YXIgc29zVHlwZSA9IHJlZi5fc29zVHlwZTtcbiAgICAgICAgICB2YXIgZW9zVHlwZSA9IHJlZi5fZW9zVHlwZTtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBBbGwgdGhlIGxldmVsIHJ1bnMgaW4gYW4gaXNvbGF0aW5nIHJ1biBzZXF1ZW5jZSBoYXZlIHRoZSBzYW1lIGVtYmVkZGluZyBsZXZlbC5cbiAgICAgICAgICAgKiBcbiAgICAgICAgICAgKiBETyBOT1QgY2hhbmdlIGFueSBgZW1iZWRMZXZlbHNbaV1gIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB2YXIgZW1iZWREaXJlY3Rpb24gPSAoKGVtYmVkTGV2ZWxzW3NlcUluZGljZXMkMVswXV0pICYgMSkgPyBUWVBFX1IgOiBUWVBFX0w7XG5cbiAgICAgICAgICAvLyA9PT0gMy4zLjQgUmVzb2x2aW5nIFdlYWsgVHlwZXMgPT09XG5cbiAgICAgICAgICAvLyBXMSArIDUuMi4gU2VhcmNoIGJhY2t3YXJkIGZyb20gZWFjaCBOU00gdG8gdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgaXNvbGF0aW5nIHJ1biBzZXF1ZW5jZSB3aG9zZVxuICAgICAgICAgIC8vIGJpZGlyZWN0aW9uYWwgdHlwZSBpcyBub3QgQk4sIGFuZCBzZXQgdGhlIE5TTSB0byBPTiBpZiBpdCBpcyBhbiBpc29sYXRlIGluaXRpYXRvciBvciBQREksIGFuZCB0byBpdHNcbiAgICAgICAgICAvLyB0eXBlIG90aGVyd2lzZS4gSWYgdGhlIE5TTSBpcyB0aGUgZmlyc3Qgbm9uLUJOIGNoYXJhY3RlciwgY2hhbmdlIHRoZSBOU00gdG8gdGhlIHR5cGUgb2Ygc29zLlxuICAgICAgICAgIGlmIChjaGFyVHlwZUNvdW50cy5nZXQoVFlQRV9OU00pKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2krKykge1xuICAgICAgICAgICAgICB2YXIgaSQ4ID0gc2VxSW5kaWNlcyQxW3NpXTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tpJDhdICYgVFlQRV9OU00pIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldlR5cGUgPSBzb3NUeXBlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqID0gc2kgLSAxOyBzaiA+PSAwOyBzai0tKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIShjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NqXV0gJiBCTl9MSUtFX1RZUEVTKSkgeyAvLzUuMiBzY2FuIGJhY2sgdG8gZmlyc3Qgbm9uLUJOXG4gICAgICAgICAgICAgICAgICAgIHByZXZUeXBlID0gY2hhclR5cGVzW3NlcUluZGljZXMkMVtzal1dO1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGFuZ2VDaGFyVHlwZShpJDgsIChwcmV2VHlwZSAmIChJU09MQVRFX0lOSVRfVFlQRVMgfCBUWVBFX1BESSkpID8gVFlQRV9PTiA6IHByZXZUeXBlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFcyLiBTZWFyY2ggYmFja3dhcmQgZnJvbSBlYWNoIGluc3RhbmNlIG9mIGEgRXVyb3BlYW4gbnVtYmVyIHVudGlsIHRoZSBmaXJzdCBzdHJvbmcgdHlwZSAoUiwgTCwgQUwsIG9yIHNvcylcbiAgICAgICAgICAvLyBpcyBmb3VuZC4gSWYgYW4gQUwgaXMgZm91bmQsIGNoYW5nZSB0aGUgdHlwZSBvZiB0aGUgRXVyb3BlYW4gbnVtYmVyIHRvIEFyYWJpYyBudW1iZXIuXG4gICAgICAgICAgaWYgKGNoYXJUeXBlQ291bnRzLmdldChUWVBFX0VOKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgc2kkMSA9IDA7IHNpJDEgPCBzZXFJbmRpY2VzJDEubGVuZ3RoOyBzaSQxKyspIHtcbiAgICAgICAgICAgICAgdmFyIGkkOSA9IHNlcUluZGljZXMkMVtzaSQxXTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tpJDldICYgVFlQRV9FTikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDEgPSBzaSQxIC0gMTsgc2okMSA+PSAtMTsgc2okMS0tKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcHJldkNoYXJUeXBlID0gc2okMSA9PT0gLTEgPyBzb3NUeXBlIDogY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaiQxXV07XG4gICAgICAgICAgICAgICAgICBpZiAocHJldkNoYXJUeXBlICYgU1RST05HX1RZUEVTKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2Q2hhclR5cGUgPT09IFRZUEVfQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VDaGFyVHlwZShpJDksIFRZUEVfQU4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVzMuIENoYW5nZSBhbGwgQUxzIHRvIFJcbiAgICAgICAgICBpZiAoY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfQUwpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSQyID0gMDsgc2kkMiA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpJDIrKykge1xuICAgICAgICAgICAgICB2YXIgaSQxMCA9IHNlcUluZGljZXMkMVtzaSQyXTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tpJDEwXSAmIFRZUEVfQUwpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VDaGFyVHlwZShpJDEwLCBUWVBFX1IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVzQuIEEgc2luZ2xlIEV1cm9wZWFuIHNlcGFyYXRvciBiZXR3ZWVuIHR3byBFdXJvcGVhbiBudW1iZXJzIGNoYW5nZXMgdG8gYSBFdXJvcGVhbiBudW1iZXIuIEEgc2luZ2xlIGNvbW1vblxuICAgICAgICAgIC8vIHNlcGFyYXRvciBiZXR3ZWVuIHR3byBudW1iZXJzIG9mIHRoZSBzYW1lIHR5cGUgY2hhbmdlcyB0byB0aGF0IHR5cGUuXG4gICAgICAgICAgaWYgKGNoYXJUeXBlQ291bnRzLmdldChUWVBFX0VTKSB8fCBjaGFyVHlwZUNvdW50cy5nZXQoVFlQRV9DUykpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHNpJDMgPSAxOyBzaSQzIDwgc2VxSW5kaWNlcyQxLmxlbmd0aCAtIDE7IHNpJDMrKykge1xuICAgICAgICAgICAgICB2YXIgaSQxMSA9IHNlcUluZGljZXMkMVtzaSQzXTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tpJDExXSAmIChUWVBFX0VTIHwgVFlQRV9DUykpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldlR5cGUkMSA9IDAsIG5leHRUeXBlID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaiQyID0gc2kkMyAtIDE7IHNqJDIgPj0gMDsgc2okMi0tKSB7XG4gICAgICAgICAgICAgICAgICBwcmV2VHlwZSQxID0gY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaiQyXV07XG4gICAgICAgICAgICAgICAgICBpZiAoIShwcmV2VHlwZSQxICYgQk5fTElLRV9UWVBFUykpIHsgLy81LjJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2okMyA9IHNpJDMgKyAxOyBzaiQzIDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2okMysrKSB7XG4gICAgICAgICAgICAgICAgICBuZXh0VHlwZSA9IGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2okM11dO1xuICAgICAgICAgICAgICAgICAgaWYgKCEobmV4dFR5cGUgJiBCTl9MSUtFX1RZUEVTKSkgeyAvLzUuMlxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldlR5cGUkMSA9PT0gbmV4dFR5cGUgJiYgKGNoYXJUeXBlc1tpJDExXSA9PT0gVFlQRV9FUyA/IHByZXZUeXBlJDEgPT09IFRZUEVfRU4gOiAocHJldlR5cGUkMSAmIChUWVBFX0VOIHwgVFlQRV9BTikpKSkge1xuICAgICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQxMSwgcHJldlR5cGUkMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVzUuIEEgc2VxdWVuY2Ugb2YgRXVyb3BlYW4gdGVybWluYXRvcnMgYWRqYWNlbnQgdG8gRXVyb3BlYW4gbnVtYmVycyBjaGFuZ2VzIHRvIGFsbCBFdXJvcGVhbiBudW1iZXJzLlxuICAgICAgICAgIGlmIChjaGFyVHlwZUNvdW50cy5nZXQoVFlQRV9FTikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHNpJDQgPSAwOyBzaSQ0IDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kkNCsrKSB7XG4gICAgICAgICAgICAgIHZhciBpJDEyID0gc2VxSW5kaWNlcyQxW3NpJDRdO1xuICAgICAgICAgICAgICBpZiAoY2hhclR5cGVzW2kkMTJdICYgVFlQRV9FTikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDQgPSBzaSQ0IC0gMTsgc2okNCA+PSAwICYmIChjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NqJDRdXSAmIChUWVBFX0VUIHwgQk5fTElLRV9UWVBFUykpOyBzaiQ0LS0pIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKHNlcUluZGljZXMkMVtzaiQ0XSwgVFlQRV9FTik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoc2kkNCsrOyBzaSQ0IDwgc2VxSW5kaWNlcyQxLmxlbmd0aCAmJiAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaSQ0XV0gJiAoVFlQRV9FVCB8IEJOX0xJS0VfVFlQRVMgfCBUWVBFX0VOKSk7IHNpJDQrKykge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kkNF1dICE9PSBUWVBFX0VOKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKHNlcUluZGljZXMkMVtzaSQ0XSwgVFlQRV9FTik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVzYuIE90aGVyd2lzZSwgc2VwYXJhdG9ycyBhbmQgdGVybWluYXRvcnMgY2hhbmdlIHRvIE90aGVyIE5ldXRyYWwuXG4gICAgICAgICAgaWYgKGNoYXJUeXBlQ291bnRzLmdldChUWVBFX0VUKSB8fCBjaGFyVHlwZUNvdW50cy5nZXQoVFlQRV9FUykgfHwgY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfQ1MpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSQ1ID0gMDsgc2kkNSA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpJDUrKykge1xuICAgICAgICAgICAgICB2YXIgaSQxMyA9IHNlcUluZGljZXMkMVtzaSQ1XTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tpJDEzXSAmIChUWVBFX0VUIHwgVFlQRV9FUyB8IFRZUEVfQ1MpKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQxMywgVFlQRV9PTik7XG4gICAgICAgICAgICAgICAgLy8gNS4yIHRyYW5zZm9ybSBhZGphY2VudCBCTnMgdG9vOlxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDUgPSBzaSQ1IC0gMTsgc2okNSA+PSAwICYmIChjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NqJDVdXSAmIEJOX0xJS0VfVFlQRVMpOyBzaiQ1LS0pIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKHNlcUluZGljZXMkMVtzaiQ1XSwgVFlQRV9PTik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDYgPSBzaSQ1ICsgMTsgc2okNiA8IHNlcUluZGljZXMkMS5sZW5ndGggJiYgKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2okNl1dICYgQk5fTElLRV9UWVBFUyk7IHNqJDYrKykge1xuICAgICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoc2VxSW5kaWNlcyQxW3NqJDZdLCBUWVBFX09OKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXNy4gU2VhcmNoIGJhY2t3YXJkIGZyb20gZWFjaCBpbnN0YW5jZSBvZiBhIEV1cm9wZWFuIG51bWJlciB1bnRpbCB0aGUgZmlyc3Qgc3Ryb25nIHR5cGUgKFIsIEwsIG9yIHNvcylcbiAgICAgICAgICAvLyBpcyBmb3VuZC4gSWYgYW4gTCBpcyBmb3VuZCwgdGhlbiBjaGFuZ2UgdGhlIHR5cGUgb2YgdGhlIEV1cm9wZWFuIG51bWJlciB0byBMLlxuICAgICAgICAgIC8vIE5PVEU6IGltcGxlbWVudGVkIGluIHNpbmdsZSBmb3J3YXJkIHBhc3MgZm9yIGVmZmljaWVuY3lcbiAgICAgICAgICBpZiAoY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfRU4pKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSQ2ID0gMCwgcHJldlN0cm9uZ1R5cGUgPSBzb3NUeXBlOyBzaSQ2IDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kkNisrKSB7XG4gICAgICAgICAgICAgIHZhciBpJDE0ID0gc2VxSW5kaWNlcyQxW3NpJDZdO1xuICAgICAgICAgICAgICB2YXIgdHlwZSA9IGNoYXJUeXBlc1tpJDE0XTtcbiAgICAgICAgICAgICAgaWYgKHR5cGUgJiBUWVBFX0VOKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZTdHJvbmdUeXBlID09PSBUWVBFX0wpIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKGkkMTQsIFRZUEVfTCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgJiBTVFJPTkdfVFlQRVMpIHtcbiAgICAgICAgICAgICAgICBwcmV2U3Ryb25nVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyA9PT0gMy4zLjUgUmVzb2x2aW5nIE5ldXRyYWwgYW5kIElzb2xhdGUgRm9ybWF0dGluZyBUeXBlcyA9PT1cblxuICAgICAgICAgIGlmIChjaGFyVHlwZUNvdW50cy5nZXQoTkVVVFJBTF9JU09MQVRFX1RZUEVTKSkge1xuICAgICAgICAgICAgLy8gTjAuIFByb2Nlc3MgYnJhY2tldCBwYWlycyBpbiBhbiBpc29sYXRpbmcgcnVuIHNlcXVlbmNlIHNlcXVlbnRpYWxseSBpbiB0aGUgbG9naWNhbCBvcmRlciBvZiB0aGUgdGV4dFxuICAgICAgICAgICAgLy8gcG9zaXRpb25zIG9mIHRoZSBvcGVuaW5nIHBhaXJlZCBicmFja2V0cyB1c2luZyB0aGUgbG9naWMgZ2l2ZW4gYmVsb3cuIFdpdGhpbiB0aGlzIHNjb3BlLCBiaWRpcmVjdGlvbmFsXG4gICAgICAgICAgICAvLyB0eXBlcyBFTiBhbmQgQU4gYXJlIHRyZWF0ZWQgYXMgUi5cbiAgICAgICAgICAgIHZhciBSX1RZUEVTX0ZPUl9OX1NURVBTID0gKFRZUEVfUiB8IFRZUEVfRU4gfCBUWVBFX0FOKTtcbiAgICAgICAgICAgIHZhciBTVFJPTkdfVFlQRVNfRk9SX05fU1RFUFMgPSBSX1RZUEVTX0ZPUl9OX1NURVBTIHwgVFlQRV9MO1xuXG4gICAgICAgICAgICAvLyAqIElkZW50aWZ5IHRoZSBicmFja2V0IHBhaXJzIGluIHRoZSBjdXJyZW50IGlzb2xhdGluZyBydW4gc2VxdWVuY2UgYWNjb3JkaW5nIHRvIEJEMTYuXG4gICAgICAgICAgICB2YXIgYnJhY2tldFBhaXJzID0gW107XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBvcGVuZXJTdGFjayA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKHZhciBzaSQ3ID0gMDsgc2kkNyA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpJDcrKykge1xuICAgICAgICAgICAgICAgIC8vIE5PVEU6IGZvciBhbnkgcG90ZW50aWFsIGJyYWNrZXQgY2hhcmFjdGVyIHdlIGFsc28gdGVzdCB0aGF0IGl0IHN0aWxsIGNhcnJpZXMgYSBOSVxuICAgICAgICAgICAgICAgIC8vIHR5cGUsIGFzIHRoYXQgbWF5IGhhdmUgYmVlbiBjaGFuZ2VkIGVhcmxpZXIuIFRoaXMgZG9lc24ndCBzZWVtIHRvIGJlIGV4cGxpY2l0bHlcbiAgICAgICAgICAgICAgICAvLyBjYWxsZWQgb3V0IGluIHRoZSBzcGVjLCBidXQgaXMgcmVxdWlyZWQgZm9yIHBhc3NhZ2Ugb2YgY2VydGFpbiB0ZXN0cy5cbiAgICAgICAgICAgICAgICBpZiAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaSQ3XV0gJiBORVVUUkFMX0lTT0xBVEVfVFlQRVMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBjaGFyID0gc3RyaW5nW3NlcUluZGljZXMkMVtzaSQ3XV07XG4gICAgICAgICAgICAgICAgICB2YXIgb3Bwb3NpdGVCcmFja2V0ID0gKHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAvLyBPcGVuaW5nIGJyYWNrZXRcbiAgICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nVG9DbG9zaW5nQnJhY2tldChjaGFyKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVyU3RhY2subGVuZ3RoIDwgNjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvcGVuZXJTdGFjay5wdXNoKHsgY2hhcjogY2hhciwgc2VxSW5kZXg6IHNpJDcgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gQ2xvc2luZyBicmFja2V0XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmICgob3Bwb3NpdGVCcmFja2V0ID0gY2xvc2luZ1RvT3BlbmluZ0JyYWNrZXQoY2hhcikpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHN0YWNrSWR4ID0gb3BlbmVyU3RhY2subGVuZ3RoIC0gMTsgc3RhY2tJZHggPj0gMDsgc3RhY2tJZHgtLSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFja0NoYXIgPSBvcGVuZXJTdGFja1tzdGFja0lkeF0uY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2tDaGFyID09PSBvcHBvc2l0ZUJyYWNrZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrQ2hhciA9PT0gY2xvc2luZ1RvT3BlbmluZ0JyYWNrZXQoZ2V0Q2Fub25pY2FsQnJhY2tldChjaGFyKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5pbmdUb0Nsb3NpbmdCcmFja2V0KGdldENhbm9uaWNhbEJyYWNrZXQoc3RhY2tDaGFyKSkgPT09IGNoYXJcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYWNrZXRQYWlycy5wdXNoKFtvcGVuZXJTdGFja1tzdGFja0lkeF0uc2VxSW5kZXgsIHNpJDddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lclN0YWNrLmxlbmd0aCA9IHN0YWNrSWR4OyAvL3BvcCB0aGUgbWF0Y2hpbmcgYnJhY2tldCBhbmQgYWxsIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJhY2tldFBhaXJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICogRm9yIGVhY2ggYnJhY2tldC1wYWlyIGVsZW1lbnQgaW4gdGhlIGxpc3Qgb2YgcGFpcnMgb2YgdGV4dCBwb3NpdGlvbnNcbiAgICAgICAgICAgIGZvciAodmFyIHBhaXJJZHggPSAwOyBwYWlySWR4IDwgYnJhY2tldFBhaXJzLmxlbmd0aDsgcGFpcklkeCsrKSB7XG4gICAgICAgICAgICAgIHZhciByZWYkMSA9IGJyYWNrZXRQYWlyc1twYWlySWR4XTtcbiAgICAgICAgICAgICAgdmFyIG9wZW5TZXFJZHggPSByZWYkMVswXTtcbiAgICAgICAgICAgICAgdmFyIGNsb3NlU2VxSWR4ID0gcmVmJDFbMV07XG4gICAgICAgICAgICAgIC8vIGEuIEluc3BlY3QgdGhlIGJpZGlyZWN0aW9uYWwgdHlwZXMgb2YgdGhlIGNoYXJhY3RlcnMgZW5jbG9zZWQgd2l0aGluIHRoZSBicmFja2V0IHBhaXIuXG4gICAgICAgICAgICAgIC8vIGIuIElmIGFueSBzdHJvbmcgdHlwZSAoZWl0aGVyIEwgb3IgUikgbWF0Y2hpbmcgdGhlIGVtYmVkZGluZyBkaXJlY3Rpb24gaXMgZm91bmQsIHNldCB0aGUgdHlwZSBmb3IgYm90aFxuICAgICAgICAgICAgICAvLyBicmFja2V0cyBpbiB0aGUgcGFpciB0byBtYXRjaCB0aGUgZW1iZWRkaW5nIGRpcmVjdGlvbi5cbiAgICAgICAgICAgICAgdmFyIGZvdW5kU3Ryb25nVHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB2YXIgdXNlU3Ryb25nVHlwZSA9IDA7XG4gICAgICAgICAgICAgIGZvciAodmFyIHNpJDggPSBvcGVuU2VxSWR4ICsgMTsgc2kkOCA8IGNsb3NlU2VxSWR4OyBzaSQ4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaSQxNSA9IHNlcUluZGljZXMkMVtzaSQ4XTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhclR5cGVzW2kkMTVdICYgU1RST05HX1RZUEVTX0ZPUl9OX1NURVBTKSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZFN0cm9uZ1R5cGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgdmFyIGxyID0gKGNoYXJUeXBlc1tpJDE1XSAmIFJfVFlQRVNfRk9SX05fU1RFUFMpID8gVFlQRV9SIDogVFlQRV9MO1xuICAgICAgICAgICAgICAgICAgaWYgKGxyID09PSBlbWJlZERpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB1c2VTdHJvbmdUeXBlID0gbHI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGMuIE90aGVyd2lzZSwgaWYgdGhlcmUgaXMgYSBzdHJvbmcgdHlwZSBpdCBtdXN0IGJlIG9wcG9zaXRlIHRoZSBlbWJlZGRpbmcgZGlyZWN0aW9uLiBUaGVyZWZvcmUsIHRlc3RcbiAgICAgICAgICAgICAgLy8gZm9yIGFuIGVzdGFibGlzaGVkIGNvbnRleHQgd2l0aCBhIHByZWNlZGluZyBzdHJvbmcgdHlwZSBieSBjaGVja2luZyBiYWNrd2FyZHMgYmVmb3JlIHRoZSBvcGVuaW5nIHBhaXJlZFxuICAgICAgICAgICAgICAvLyBicmFja2V0IHVudGlsIHRoZSBmaXJzdCBzdHJvbmcgdHlwZSAoTCwgUiwgb3Igc29zKSBpcyBmb3VuZC5cbiAgICAgICAgICAgICAgLy8gICAgMS4gSWYgdGhlIHByZWNlZGluZyBzdHJvbmcgdHlwZSBpcyBhbHNvIG9wcG9zaXRlIHRoZSBlbWJlZGRpbmcgZGlyZWN0aW9uLCBjb250ZXh0IGlzIGVzdGFibGlzaGVkLCBzb1xuICAgICAgICAgICAgICAvLyAgICBzZXQgdGhlIHR5cGUgZm9yIGJvdGggYnJhY2tldHMgaW4gdGhlIHBhaXIgdG8gdGhhdCBkaXJlY3Rpb24uXG4gICAgICAgICAgICAgIC8vICAgIDIuIE90aGVyd2lzZSBzZXQgdGhlIHR5cGUgZm9yIGJvdGggYnJhY2tldHMgaW4gdGhlIHBhaXIgdG8gdGhlIGVtYmVkZGluZyBkaXJlY3Rpb24uXG4gICAgICAgICAgICAgIGlmIChmb3VuZFN0cm9uZ1R5cGUgJiYgIXVzZVN0cm9uZ1R5cGUpIHtcbiAgICAgICAgICAgICAgICB1c2VTdHJvbmdUeXBlID0gc29zVHlwZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaSQ5ID0gb3BlblNlcUlkeCAtIDE7IHNpJDkgPj0gMDsgc2kkOS0tKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSQxNiA9IHNlcUluZGljZXMkMVtzaSQ5XTtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbaSQxNl0gJiBTVFJPTkdfVFlQRVNfRk9SX05fU1RFUFMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxyJDEgPSAoY2hhclR5cGVzW2kkMTZdICYgUl9UWVBFU19GT1JfTl9TVEVQUykgPyBUWVBFX1IgOiBUWVBFX0w7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsciQxICE9PSBlbWJlZERpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgIHVzZVN0cm9uZ1R5cGUgPSBsciQxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHVzZVN0cm9uZ1R5cGUgPSBlbWJlZERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodXNlU3Ryb25nVHlwZSkge1xuICAgICAgICAgICAgICAgIGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbb3BlblNlcUlkeF1dID0gY2hhclR5cGVzW3NlcUluZGljZXMkMVtjbG9zZVNlcUlkeF1dID0gdXNlU3Ryb25nVHlwZTtcbiAgICAgICAgICAgICAgICAvLyAqIEFueSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IGhhZCBvcmlnaW5hbCBiaWRpcmVjdGlvbmFsIGNoYXJhY3RlciB0eXBlIE5TTSBwcmlvciB0byB0aGUgYXBwbGljYXRpb25cbiAgICAgICAgICAgICAgICAvLyBvZiBXMSB0aGF0IGltbWVkaWF0ZWx5IGZvbGxvdyBhIHBhaXJlZCBicmFja2V0IHdoaWNoIGNoYW5nZWQgdG8gTCBvciBSIHVuZGVyIE4wIHNob3VsZCBjaGFuZ2UgdG8gbWF0Y2hcbiAgICAgICAgICAgICAgICAvLyB0aGUgdHlwZSBvZiB0aGVpciBwcmVjZWRpbmcgYnJhY2tldC5cbiAgICAgICAgICAgICAgICBpZiAodXNlU3Ryb25nVHlwZSAhPT0gZW1iZWREaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNpJDEwID0gb3BlblNlcUlkeCArIDE7IHNpJDEwIDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kkMTArKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NpJDEwXV0gJiBCTl9MSUtFX1RZUEVTKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRCaWRpQ2hhclR5cGUoc3RyaW5nW3NlcUluZGljZXMkMVtzaSQxMF1dKSAmIFRZUEVfTlNNKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NpJDEwXV0gPSB1c2VTdHJvbmdUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1c2VTdHJvbmdUeXBlICE9PSBlbWJlZERpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2kkMTEgPSBjbG9zZVNlcUlkeCArIDE7IHNpJDExIDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kkMTErKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NpJDExXV0gJiBCTl9MSUtFX1RZUEVTKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRCaWRpQ2hhclR5cGUoc3RyaW5nW3NlcUluZGljZXMkMVtzaSQxMV1dKSAmIFRZUEVfTlNNKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NpJDExXV0gPSB1c2VTdHJvbmdUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE4xLiBBIHNlcXVlbmNlIG9mIE5JcyB0YWtlcyB0aGUgZGlyZWN0aW9uIG9mIHRoZSBzdXJyb3VuZGluZyBzdHJvbmcgdGV4dCBpZiB0aGUgdGV4dCBvbiBib3RoIHNpZGVzIGhhcyB0aGVcbiAgICAgICAgICAgIC8vIHNhbWUgZGlyZWN0aW9uLlxuICAgICAgICAgICAgLy8gTjIuIEFueSByZW1haW5pbmcgTklzIHRha2UgdGhlIGVtYmVkZGluZyBkaXJlY3Rpb24uXG4gICAgICAgICAgICBmb3IgKHZhciBzaSQxMiA9IDA7IHNpJDEyIDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kkMTIrKykge1xuICAgICAgICAgICAgICBpZiAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaSQxMl1dICYgTkVVVFJBTF9JU09MQVRFX1RZUEVTKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5pUnVuU3RhcnQgPSBzaSQxMiwgbmlSdW5FbmQgPSBzaSQxMjtcbiAgICAgICAgICAgICAgICB2YXIgcHJldlR5cGUkMiA9IHNvc1R5cGU7IC8vc2kgPT09IDAgPyBzb3NUeXBlIDogKGNoYXJUeXBlc1tzZXFJbmRpY2VzW3NpIC0gMV1dICYgUl9UWVBFU19GT1JfTl9TVEVQUykgPyBUWVBFX1IgOiBUWVBFX0xcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaTIgPSBzaSQxMiAtIDE7IHNpMiA+PSAwOyBzaTItLSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kyXV0gJiBCTl9MSUtFX1RZUEVTKSB7XG4gICAgICAgICAgICAgICAgICAgIG5pUnVuU3RhcnQgPSBzaTI7IC8vNS4yIHRyZWF0IEJOcyBhZGphY2VudCB0byBOSXMgYXMgTklzXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcmV2VHlwZSQyID0gKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kyXV0gJiBSX1RZUEVTX0ZPUl9OX1NURVBTKSA/IFRZUEVfUiA6IFRZUEVfTDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG5leHRUeXBlJDEgPSBlb3NUeXBlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNpMiQxID0gc2kkMTIgKyAxOyBzaTIkMSA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpMiQxKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NpMiQxXV0gJiAoTkVVVFJBTF9JU09MQVRFX1RZUEVTIHwgQk5fTElLRV9UWVBFUykpIHtcbiAgICAgICAgICAgICAgICAgICAgbmlSdW5FbmQgPSBzaTIkMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRUeXBlJDEgPSAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaTIkMV1dICYgUl9UWVBFU19GT1JfTl9TVEVQUykgPyBUWVBFX1IgOiBUWVBFX0w7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDcgPSBuaVJ1blN0YXJ0OyBzaiQ3IDw9IG5pUnVuRW5kOyBzaiQ3KyspIHtcbiAgICAgICAgICAgICAgICAgIGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2okN11dID0gcHJldlR5cGUkMiA9PT0gbmV4dFR5cGUkMSA/IHByZXZUeXBlJDIgOiBlbWJlZERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2kkMTIgPSBuaVJ1bkVuZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vID09PSAzLjMuNiBSZXNvbHZpbmcgSW1wbGljaXQgTGV2ZWxzID09PVxuXG4gICAgICAgIGZvciAodmFyIGkkMTcgPSBwYXJhZ3JhcGguc3RhcnQ7IGkkMTcgPD0gcGFyYWdyYXBoLmVuZDsgaSQxNysrKSB7XG4gICAgICAgICAgdmFyIGxldmVsJDMgPSBlbWJlZExldmVsc1tpJDE3XTtcbiAgICAgICAgICB2YXIgdHlwZSQxID0gY2hhclR5cGVzW2kkMTddO1xuICAgICAgICAgIC8vIEkyLiBGb3IgYWxsIGNoYXJhY3RlcnMgd2l0aCBhbiBvZGQgKHJpZ2h0LXRvLWxlZnQpIGVtYmVkZGluZyBsZXZlbCwgdGhvc2Ugb2YgdHlwZSBMLCBFTiBvciBBTiBnbyB1cCBvbmUgbGV2ZWwuXG4gICAgICAgICAgaWYgKGxldmVsJDMgJiAxKSB7XG4gICAgICAgICAgICBpZiAodHlwZSQxICYgKFRZUEVfTCB8IFRZUEVfRU4gfCBUWVBFX0FOKSkge1xuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDE3XSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEkxLiBGb3IgYWxsIGNoYXJhY3RlcnMgd2l0aCBhbiBldmVuIChsZWZ0LXRvLXJpZ2h0KSBlbWJlZGRpbmcgbGV2ZWwsIHRob3NlIG9mIHR5cGUgUiBnbyB1cCBvbmUgbGV2ZWxcbiAgICAgICAgICAvLyBhbmQgdGhvc2Ugb2YgdHlwZSBBTiBvciBFTiBnbyB1cCB0d28gbGV2ZWxzLlxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGUkMSAmIFRZUEVfUikge1xuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDE3XSsrO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlJDEgJiAoVFlQRV9BTiB8IFRZUEVfRU4pKSB7XG4gICAgICAgICAgICAgIGVtYmVkTGV2ZWxzW2kkMTddICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gNS4yOiBSZXNvbHZlIGFueSBMUkUsIFJMRSwgTFJPLCBSTE8sIFBERiwgb3IgQk4gdG8gdGhlIGxldmVsIG9mIHRoZSBwcmVjZWRpbmcgY2hhcmFjdGVyIGlmIHRoZXJlIGlzIG9uZSxcbiAgICAgICAgICAvLyBhbmQgb3RoZXJ3aXNlIHRvIHRoZSBiYXNlIGxldmVsLlxuICAgICAgICAgIGlmICh0eXBlJDEgJiBCTl9MSUtFX1RZUEVTKSB7XG4gICAgICAgICAgICBlbWJlZExldmVsc1tpJDE3XSA9IGkkMTcgPT09IDAgPyBwYXJhZ3JhcGgubGV2ZWwgOiBlbWJlZExldmVsc1tpJDE3IC0gMV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gMy40IEwxLjEtNDogUmVzZXQgdGhlIGVtYmVkZGluZyBsZXZlbCBvZiBzZWdtZW50L3BhcmFncmFwaCBzZXBhcmF0b3JzLCBhbmQgYW55IHNlcXVlbmNlIG9mIHdoaXRlc3BhY2Ugb3JcbiAgICAgICAgICAvLyBpc29sYXRlIGZvcm1hdHRpbmcgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlbSBvciB0aGUgZW5kIG9mIHRoZSBwYXJhZ3JhcGgsIHRvIHRoZSBwYXJhZ3JhcGggbGV2ZWwuXG4gICAgICAgICAgLy8gTk9URTogdGhpcyB3aWxsIGFsc28gbmVlZCB0byBiZSBhcHBsaWVkIHRvIGVhY2ggaW5kaXZpZHVhbCBsaW5lIGVuZGluZyBhZnRlciBsaW5lIHdyYXBwaW5nIG9jY3Vycy5cbiAgICAgICAgICBpZiAoaSQxNyA9PT0gcGFyYWdyYXBoLmVuZCB8fCBnZXRCaWRpQ2hhclR5cGUoc3RyaW5nW2kkMTddKSAmIChUWVBFX1MgfCBUWVBFX0IpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqJDEgPSBpJDE3OyBqJDEgPj0gMCAmJiAoZ2V0QmlkaUNoYXJUeXBlKHN0cmluZ1tqJDFdKSAmIFRSQUlMSU5HX1RZUEVTKTsgaiQxLS0pIHtcbiAgICAgICAgICAgICAgZW1iZWRMZXZlbHNbaiQxXSA9IHBhcmFncmFwaC5sZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRE9ORSEgVGhlIHJlc29sdmVkIGxldmVscyBjYW4gdGhlbiBiZSB1c2VkLCBhZnRlciBsaW5lIHdyYXBwaW5nLCB0byBmbGlwIHJ1bnMgb2YgY2hhcmFjdGVyc1xuICAgICAgLy8gYWNjb3JkaW5nIHRvIHNlY3Rpb24gMy40IFJlb3JkZXJpbmcgUmVzb2x2ZWQgTGV2ZWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZXZlbHM6IGVtYmVkTGV2ZWxzLFxuICAgICAgICBwYXJhZ3JhcGhzOiBwYXJhZ3JhcGhzXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRldGVybWluZUF1dG9FbWJlZExldmVsIChzdGFydCwgaXNGU0kpIHtcbiAgICAgICAgLy8gMy4zLjEgUDIgLSBQM1xuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgY2hhclR5cGUgPSBjaGFyVHlwZXNbaV07XG4gICAgICAgICAgaWYgKGNoYXJUeXBlICYgKFRZUEVfUiB8IFRZUEVfQUwpKSB7XG4gICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKGNoYXJUeXBlICYgKFRZUEVfQiB8IFRZUEVfTCkpIHx8IChpc0ZTSSAmJiBjaGFyVHlwZSA9PT0gVFlQRV9QREkpKSB7XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhclR5cGUgJiBJU09MQVRFX0lOSVRfVFlQRVMpIHtcbiAgICAgICAgICAgIHZhciBwZGkgPSBpbmRleE9mTWF0Y2hpbmdQREkoaSk7XG4gICAgICAgICAgICBpID0gcGRpID09PSAtMSA/IHN0cmluZy5sZW5ndGggOiBwZGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGluZGV4T2ZNYXRjaGluZ1BESSAoaXNvbGF0ZVN0YXJ0KSB7XG4gICAgICAgIC8vIDMuMS4yIEJEOVxuICAgICAgICB2YXIgaXNvbGF0aW9uTGV2ZWwgPSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gaXNvbGF0ZVN0YXJ0ICsgMTsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBjaGFyVHlwZSA9IGNoYXJUeXBlc1tpXTtcbiAgICAgICAgICBpZiAoY2hhclR5cGUgJiBUWVBFX0IpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGFyVHlwZSAmIFRZUEVfUERJKSB7XG4gICAgICAgICAgICBpZiAoLS1pc29sYXRpb25MZXZlbCA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhclR5cGUgJiBJU09MQVRFX0lOSVRfVFlQRVMpIHtcbiAgICAgICAgICAgIGlzb2xhdGlvbkxldmVsKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJpZGkgbWlycm9yZWQgY2hhcnMgZGF0YSwgYXV0byBnZW5lcmF0ZWRcbiAgICB2YXIgZGF0YSA9IFwiMTQ+MSxqPjIsdD4yLHU+MiwxYT5nLDJ2Mz4xLDE+MSwxZ2U+MSwxd2Q+MSxiPjEsMWo+MSxmPjEsYWk+MywtMj4zLCsxLDg+MWswLC0xanE+MXk3LC0xeTY+MWhmLC0xaGU+MWg2LC0xaDU+MWhhLC0xaDg+MXFpLC0xcHU+MSw2PjN1LC0zcz43LDY+MSwxPjEsZj4xLDE+MSwrMiwzPjEsMT4xLCsxMyw0PjEsMT4xLDY+MWVvLC0xZWU+MSwzPjFtZywtMW1lPjFtaywtMW1qPjFtaSwtMW1nPjFtaSwtMW1kPjEsMT4xLCsyLDE+MTBrLC0xMDM+MSwxPjEsND4xLDU+MSwxPjEsKzEwLDM+MSwxPjgsLTc+OCwrMSwtNj43LCsxLGE+MSwxPjEsdT4xLHU2PjEsMT4xLCs1LDI2PjEsMT4xLDI+MSwyPjIsOD4xLDc+MSw0PjEsMT4xLCs1LGI4PjEsMT4xLCszLDE+MywtMj4xLDI+MSwxPjEsKzIsYz4xLDM+MSwxPjEsKzIsaD4xLDM+MSxhPjEsMT4xLDI+MSwzPjEsMT4xLGQ+MSxmPjEsMz4xLDFhPjEsMT4xLDY+MSw3PjEsMTM+MSxrPjEsMT4xLCsxOSw0PjEsMT4xLCsyLDI+MSwxPjEsKzE4LG0+MSxhPjEsMT4xLGxrPjEsMT4xLDQ+MSwyPjEsZj4xLDM+MSwxPjEsKzMsZGI+MSwxPjEsKzMsMz4xLDE+MSwrMiwxNHFtPjEsMT4xLCsxLDY+MSw0aj4xLGo+Mix0PjIsdT4yLDI+MSwrMVwiO1xuXG4gICAgdmFyIG1pcnJvck1hcDtcblxuICAgIGZ1bmN0aW9uIHBhcnNlICgpIHtcbiAgICAgIGlmICghbWlycm9yTWFwKSB7XG4gICAgICAgIC8vY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICB2YXIgcmVmID0gcGFyc2VDaGFyYWN0ZXJNYXAoZGF0YSwgdHJ1ZSk7XG4gICAgICAgIHZhciBtYXAgPSByZWYubWFwO1xuICAgICAgICB2YXIgcmV2ZXJzZU1hcCA9IHJlZi5yZXZlcnNlTWFwO1xuICAgICAgICAvLyBDb21iaW5lIGJvdGggbWFwcyBpbnRvIG9uZVxuICAgICAgICByZXZlcnNlTWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgbWlycm9yTWFwID0gbWFwO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGBtaXJyb3JlZCBjaGFycyBwYXJzZWQgaW4gJHtwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0fW1zYClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNaXJyb3JlZENoYXJhY3RlciAoY2hhcikge1xuICAgICAgcGFyc2UoKTtcbiAgICAgIHJldHVybiBtaXJyb3JNYXAuZ2V0KGNoYXIpIHx8IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHN0cmluZyBhbmQgaXRzIHJlc29sdmVkIGVtYmVkZGluZyBsZXZlbHMsIGJ1aWxkIGEgbWFwIG9mIGluZGljZXMgdG8gcmVwbGFjZW1lbnQgY2hhcnNcbiAgICAgKiBmb3IgYW55IGNoYXJhY3RlcnMgaW4gcmlnaHQtdG8tbGVmdCBzZWdtZW50cyB0aGF0IGhhdmUgZGVmaW5lZCBtaXJyb3JlZCBjaGFyYWN0ZXJzLlxuICAgICAqIEBwYXJhbSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gZW1iZWRkaW5nTGV2ZWxzXG4gICAgICogQHBhcmFtIFtzdGFydF1cbiAgICAgKiBAcGFyYW0gW2VuZF1cbiAgICAgKiBAcmV0dXJuIHtNYXA8bnVtYmVyLCBzdHJpbmc+fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1pcnJvcmVkQ2hhcmFjdGVyc01hcChzdHJpbmcsIGVtYmVkZGluZ0xldmVscywgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBzdGFydCA9IE1hdGgubWF4KDAsIHN0YXJ0ID09IG51bGwgPyAwIDogK3N0YXJ0KTtcbiAgICAgIGVuZCA9IE1hdGgubWluKHN0ckxlbiAtIDEsIGVuZCA9PSBudWxsID8gc3RyTGVuIC0gMSA6ICtlbmQpO1xuXG4gICAgICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgICAgIGlmIChlbWJlZGRpbmdMZXZlbHNbaV0gJiAxKSB7IC8vb25seSBvZGQgKHJ0bCkgbGV2ZWxzXG4gICAgICAgICAgdmFyIG1pcnJvciA9IGdldE1pcnJvcmVkQ2hhcmFjdGVyKHN0cmluZ1tpXSk7XG4gICAgICAgICAgaWYgKG1pcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwLnNldChpLCBtaXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgc3RhcnQgYW5kIGVuZCBkZW5vdGluZyBhIHNpbmdsZSBsaW5lIHdpdGhpbiBhIHN0cmluZywgYW5kIGEgc2V0IG9mIHByZWNhbGN1bGF0ZWRcbiAgICAgKiBiaWRpIGVtYmVkZGluZyBsZXZlbHMsIHByb2R1Y2UgYSBsaXN0IG9mIHNlZ21lbnRzIHdob3NlIG9yZGVyaW5nIHNob3VsZCBiZSBmbGlwcGVkLCBpbiBzZXF1ZW5jZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gdGhlIGZ1bGwgaW5wdXQgc3RyaW5nXG4gICAgICogQHBhcmFtIHtHZXRFbWJlZGRpbmdMZXZlbHNSZXN1bHR9IGVtYmVkZGluZ0xldmVsc1Jlc3VsdCAtIHRoZSByZXN1bHQgb2JqZWN0IGZyb20gZ2V0RW1iZWRkaW5nTGV2ZWxzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydF0gLSBmaXJzdCBjaGFyYWN0ZXIgaW4gYSBzdWJzZXQgb2YgdGhlIGZ1bGwgc3RyaW5nXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmRdIC0gbGFzdCBjaGFyYWN0ZXIgaW4gYSBzdWJzZXQgb2YgdGhlIGZ1bGwgc3RyaW5nXG4gICAgICogQHJldHVybiB7bnVtYmVyW11bXX0gLSB0aGUgbGlzdCBvZiBzdGFydC9lbmQgc2VnbWVudHMgdGhhdCBzaG91bGQgYmUgZmxpcHBlZCwgaW4gb3JkZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmVvcmRlclNlZ21lbnRzKHN0cmluZywgZW1iZWRkaW5nTGV2ZWxzUmVzdWx0LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHN0YXJ0ID0gTWF0aC5tYXgoMCwgc3RhcnQgPT0gbnVsbCA/IDAgOiArc3RhcnQpO1xuICAgICAgZW5kID0gTWF0aC5taW4oc3RyTGVuIC0gMSwgZW5kID09IG51bGwgPyBzdHJMZW4gLSAxIDogK2VuZCk7XG5cbiAgICAgIHZhciBzZWdtZW50cyA9IFtdO1xuICAgICAgZW1iZWRkaW5nTGV2ZWxzUmVzdWx0LnBhcmFncmFwaHMuZm9yRWFjaChmdW5jdGlvbiAocGFyYWdyYXBoKSB7XG4gICAgICAgIHZhciBsaW5lU3RhcnQgPSBNYXRoLm1heChzdGFydCwgcGFyYWdyYXBoLnN0YXJ0KTtcbiAgICAgICAgdmFyIGxpbmVFbmQgPSBNYXRoLm1pbihlbmQsIHBhcmFncmFwaC5lbmQpO1xuICAgICAgICBpZiAobGluZVN0YXJ0IDwgbGluZUVuZCkge1xuICAgICAgICAgIC8vIExvY2FsIHNsaWNlIGZvciBtdXRhdGlvblxuICAgICAgICAgIHZhciBsaW5lTGV2ZWxzID0gZW1iZWRkaW5nTGV2ZWxzUmVzdWx0LmxldmVscy5zbGljZShsaW5lU3RhcnQsIGxpbmVFbmQgKyAxKTtcblxuICAgICAgICAgIC8vIDMuNCBMMS40OiBSZXNldCBhbnkgc2VxdWVuY2Ugb2Ygd2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGFuZC9vciBpc29sYXRlIGZvcm1hdHRpbmcgY2hhcmFjdGVycyBhdCB0aGVcbiAgICAgICAgICAvLyBlbmQgb2YgdGhlIGxpbmUgdG8gdGhlIHBhcmFncmFwaCBsZXZlbC5cbiAgICAgICAgICBmb3IgKHZhciBpID0gbGluZUVuZDsgaSA+PSBsaW5lU3RhcnQgJiYgKGdldEJpZGlDaGFyVHlwZShzdHJpbmdbaV0pICYgVFJBSUxJTkdfVFlQRVMpOyBpLS0pIHtcbiAgICAgICAgICAgIGxpbmVMZXZlbHNbaV0gPSBwYXJhZ3JhcGgubGV2ZWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTDIuIEZyb20gdGhlIGhpZ2hlc3QgbGV2ZWwgZm91bmQgaW4gdGhlIHRleHQgdG8gdGhlIGxvd2VzdCBvZGQgbGV2ZWwgb24gZWFjaCBsaW5lLCBpbmNsdWRpbmcgaW50ZXJtZWRpYXRlIGxldmVsc1xuICAgICAgICAgIC8vIG5vdCBhY3R1YWxseSBwcmVzZW50IGluIHRoZSB0ZXh0LCByZXZlcnNlIGFueSBjb250aWd1b3VzIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgdGhhdCBhcmUgYXQgdGhhdCBsZXZlbCBvciBoaWdoZXIuXG4gICAgICAgICAgdmFyIG1heExldmVsID0gcGFyYWdyYXBoLmxldmVsO1xuICAgICAgICAgIHZhciBtaW5PZGRMZXZlbCA9IEluZmluaXR5O1xuICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGxpbmVMZXZlbHMubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgdmFyIGxldmVsID0gbGluZUxldmVsc1tpJDFdO1xuICAgICAgICAgICAgaWYgKGxldmVsID4gbWF4TGV2ZWwpIHsgbWF4TGV2ZWwgPSBsZXZlbDsgfVxuICAgICAgICAgICAgaWYgKGxldmVsIDwgbWluT2RkTGV2ZWwpIHsgbWluT2RkTGV2ZWwgPSBsZXZlbCB8IDE7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgbHZsID0gbWF4TGV2ZWw7IGx2bCA+PSBtaW5PZGRMZXZlbDsgbHZsLS0pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IGxpbmVMZXZlbHMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICBpZiAobGluZUxldmVsc1tpJDJdID49IGx2bCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWdTdGFydCA9IGkkMjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSQyICsgMSA8IGxpbmVMZXZlbHMubGVuZ3RoICYmIGxpbmVMZXZlbHNbaSQyICsgMV0gPj0gbHZsKSB7XG4gICAgICAgICAgICAgICAgICBpJDIrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkkMiA+IHNlZ1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKFtzZWdTdGFydCArIGxpbmVTdGFydCwgaSQyICsgbGluZVN0YXJ0XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZWdtZW50c1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge0dldEVtYmVkZGluZ0xldmVsc1Jlc3VsdH0gZW1iZWRMZXZlbHNSZXN1bHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0XVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kXVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIG5ldyBzdHJpbmcgd2l0aCBiaWRpIHNlZ21lbnRzIHJlb3JkZXJlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJlb3JkZXJlZFN0cmluZyhzdHJpbmcsIGVtYmVkTGV2ZWxzUmVzdWx0LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kaWNlcyA9IGdldFJlb3JkZXJlZEluZGljZXMoc3RyaW5nLCBlbWJlZExldmVsc1Jlc3VsdCwgc3RhcnQsIGVuZCk7XG4gICAgICB2YXIgY2hhcnMgPSBbXS5jb25jYXQoIHN0cmluZyApO1xuICAgICAgaW5kaWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGFySW5kZXgsIGkpIHtcbiAgICAgICAgY2hhcnNbaV0gPSAoXG4gICAgICAgICAgKGVtYmVkTGV2ZWxzUmVzdWx0LmxldmVsc1tjaGFySW5kZXhdICYgMSkgPyBnZXRNaXJyb3JlZENoYXJhY3RlcihzdHJpbmdbY2hhckluZGV4XSkgOiBudWxsXG4gICAgICAgICkgfHwgc3RyaW5nW2NoYXJJbmRleF07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge0dldEVtYmVkZGluZ0xldmVsc1Jlc3VsdH0gZW1iZWRMZXZlbHNSZXN1bHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0XVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kXVxuICAgICAqIEByZXR1cm4ge251bWJlcltdfSBhbiBhcnJheSB3aXRoIGNoYXJhY3RlciBpbmRpY2VzIGluIHRoZWlyIG5ldyBiaWRpIG9yZGVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmVvcmRlcmVkSW5kaWNlcyhzdHJpbmcsIGVtYmVkTGV2ZWxzUmVzdWx0LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgc2VnbWVudHMgPSBnZXRSZW9yZGVyU2VnbWVudHMoc3RyaW5nLCBlbWJlZExldmVsc1Jlc3VsdCwgc3RhcnQsIGVuZCk7XG4gICAgICAvLyBGaWxsIGFuIGFycmF5IHdpdGggaW5kaWNlc1xuICAgICAgdmFyIGluZGljZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluZGljZXNbaV0gPSBpO1xuICAgICAgfVxuICAgICAgLy8gUmV2ZXJzZSBlYWNoIHNlZ21lbnQgaW4gb3JkZXJcbiAgICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgc3RhcnQgPSByZWZbMF07XG4gICAgICAgIHZhciBlbmQgPSByZWZbMV07XG5cbiAgICAgICAgdmFyIHNsaWNlID0gaW5kaWNlcy5zbGljZShzdGFydCwgZW5kICsgMSk7XG4gICAgICAgIGZvciAodmFyIGkgPSBzbGljZS5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICBpbmRpY2VzW2VuZCAtIGldID0gc2xpY2VbaV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluZGljZXNcbiAgICB9XG5cbiAgICBleHBvcnRzLmNsb3NpbmdUb09wZW5pbmdCcmFja2V0ID0gY2xvc2luZ1RvT3BlbmluZ0JyYWNrZXQ7XG4gICAgZXhwb3J0cy5nZXRCaWRpQ2hhclR5cGUgPSBnZXRCaWRpQ2hhclR5cGU7XG4gICAgZXhwb3J0cy5nZXRCaWRpQ2hhclR5cGVOYW1lID0gZ2V0QmlkaUNoYXJUeXBlTmFtZTtcbiAgICBleHBvcnRzLmdldENhbm9uaWNhbEJyYWNrZXQgPSBnZXRDYW5vbmljYWxCcmFja2V0O1xuICAgIGV4cG9ydHMuZ2V0RW1iZWRkaW5nTGV2ZWxzID0gZ2V0RW1iZWRkaW5nTGV2ZWxzO1xuICAgIGV4cG9ydHMuZ2V0TWlycm9yZWRDaGFyYWN0ZXIgPSBnZXRNaXJyb3JlZENoYXJhY3RlcjtcbiAgICBleHBvcnRzLmdldE1pcnJvcmVkQ2hhcmFjdGVyc01hcCA9IGdldE1pcnJvcmVkQ2hhcmFjdGVyc01hcDtcbiAgICBleHBvcnRzLmdldFJlb3JkZXJTZWdtZW50cyA9IGdldFJlb3JkZXJTZWdtZW50cztcbiAgICBleHBvcnRzLmdldFJlb3JkZXJlZEluZGljZXMgPSBnZXRSZW9yZGVyZWRJbmRpY2VzO1xuICAgIGV4cG9ydHMuZ2V0UmVvcmRlcmVkU3RyaW5nID0gZ2V0UmVvcmRlcmVkU3RyaW5nO1xuICAgIGV4cG9ydHMub3BlbmluZ1RvQ2xvc2luZ0JyYWNrZXQgPSBvcGVuaW5nVG9DbG9zaW5nQnJhY2tldDtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbiAgICByZXR1cm4gZXhwb3J0cztcblxuICB9KHt9KSk7XG4gIHJldHVybiBiaWRpfVxuXG4gIHJldHVybiBiaWRpRmFjdG9yeTtcblxufSkpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bidi-js/dist/bidi.js\n");

/***/ })

};
;